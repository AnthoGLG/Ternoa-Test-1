import { Event } from "@polkadot/types/interfaces/system";
import { MarketplaceKind } from "./marketplace/enum";
import { Protocols, TransmissionCancellation } from "./protocols";
import { AcceptanceAction, CancellationFeeAction, RentFeeAction } from "./rent/enum";
import { DurationType } from "./rent/types";
import { ReportParamsType } from "./tee";
export declare enum EventType {
    AssetTransferred = "assets.Transferred",
    BalancesWithdraw = "balances.Withdraw",
    BalancesDeposit = "balances.Deposit",
    BalancesTransfer = "balances.Transfer",
    BalancesEndowed = "balances.Endowed",
    TreasuryDeposit = "treasury.Deposit",
    NFTCreated = "nft.NFTCreated",
    SecretAddedToNFT = "nft.SecretAddedToNFT",
    NFTBurned = "nft.NFTBurned",
    NFTDelegated = "nft.NFTDelegated",
    NFTRoyaltySet = "nft.NFTRoyaltySet",
    NFTTransferred = "nft.NFTTransferred",
    NFTAddedToCollection = "nft.NFTAddedToCollection",
    NFTConvertedToCapsule = "nft.NFTConvertedToCapsule",
    CapsuleOffchainDataSet = "nft.CapsuleOffchainDataSet",
    CapsuleKeyUpdateNotified = "nft.CapsuleKeyUpdateNotified",
    CapsuleReverted = "nft.CapsuleReverted",
    CollectionCreated = "nft.CollectionCreated",
    CollectionLimited = "nft.CollectionLimited",
    CollectionClosed = "nft.CollectionClosed",
    CollectionBurned = "nft.CollectionBurned",
    CollectionOffchainDataSet = "nft.CollectionOffchainDataSet",
    ProtocolSet = "transmissionProtocols.ProtocolSet",
    ProtocolRemoved = "transmissionProtocols.ProtocolRemoved",
    TimerReset = "transmissionProtocols.TimerReset",
    ConsentAdded = "transmissionProtocols.ConsentAdded",
    ThresholdReached = "transmissionProtocols.ThresholdReached",
    Transmitted = "transmissionProtocols.Transmitted",
    ContractCreated = "rent.ContractCreated",
    ContractStarted = "rent.ContractStarted",
    ContractRevoked = "rent.ContractRevoked",
    ContractOfferCreated = "rent.ContractOfferCreated",
    ContractOfferRetracted = "rent.ContractOfferRetracted",
    ContractSubscriptionTermsChanged = "rent.ContractSubscriptionTermsChanged",
    ContractSubscriptionTermsAccepted = "rent.ContractSubscriptionTermsAccepted",
    ContractEnded = "rent.ContractEnded",
    ContractSubscriptionPeriodStarted = "rent.ContractSubscriptionPeriodStarted",
    ContractExpired = "rent.ContractExpired",
    ContractCanceled = "rent.ContractCanceled",
    MarketplaceCreated = "marketplace.MarketplaceCreated",
    MarketplaceOwnerSet = "marketplace.MarketplaceOwnerSet",
    MarketplaceKindSet = "marketplace.MarketplaceKindSet",
    MarketplaceConfigSet = "marketplace.MarketplaceConfigSet",
    MarketplaceMintFeeSet = "marketplace.MarketplaceMintFeeSet",
    NFTListed = "marketplace.NFTListed",
    NFTUnlisted = "marketplace.NFTUnlisted",
    NFTSold = "marketplace.NFTSold",
    AuctionCreated = "auction.AuctionCreated",
    AuctionCancelled = "auction.AuctionCancelled",
    AuctionCompleted = "auction.AuctionCompleted",
    BidAdded = "auction.BidAdded",
    BidRemoved = "auction.BidRemoved",
    BalanceClaimed = "auction.BalanceClaimed",
    ItemFailed = "utility.ItemFailed",
    ItemCompleted = "utility.ItemCompleted",
    BatchInterrupted = "utility.BatchInterrupted",
    BatchCompletedWithErrors = "utility.BatchCompletedWithErrors",
    BatchCompleted = "utility.BatchCompleted",
    ExtrinsicFailed = "system.ExtrinsicFailed",
    ExtrinsicSuccess = "system.ExtrinsicSuccess",
    NewAccount = "system.NewAccount",
    MetricsServerReportSubmitted = "tee.MetricsServerReportSubmitted",
    RewardsClaimed = "tee.RewardsClaimed",
    Unknown = "Unknown"
}
export declare class BlockchainEvent {
    type: EventType;
    raw: Event;
    section: string;
    method: string;
    constructor(raw: Event, type: EventType);
    static fromEvent(event: Event): BlockchainEvent;
}
/**
 * This class represents the on-chain AssetTransferredEvent event.
 */
export declare class AssetTransferredEvent extends BlockchainEvent {
    assetId: number;
    from: string;
    to: string;
    amount: string;
    amountRounded: number;
    /**
     * Construct the data object from the AssetTransferredEvent event
     * @param event The AssetTransferredEvent event
     */
    constructor(event: Event);
}
/**
 * This class represents the on-chain BalancesWithdrawEvent event.
 */
export declare class BalancesWithdrawEvent extends BlockchainEvent {
    who: string;
    amount: string;
    amountRounded: number;
    /**
     * Construct the data object from the BalancesWithdrawEvent event
     * @param event The BalancesWithdrawEvent event
     */
    constructor(event: Event);
}
/**
 * This class represents the on-chain BalancesDepositEvent event.
 */
export declare class BalancesDepositEvent extends BlockchainEvent {
    who: string;
    amount: string;
    amountRounded: number;
    /**
     * Construct the data object from the BalancesDepositEvent event
     * @param event The BalancesDepositEvent event
     */
    constructor(event: Event);
}
/**
 * This class represents the on-chain BalancesTransferEvent event.
 */
export declare class BalancesTransferEvent extends BlockchainEvent {
    from: string;
    to: string;
    amount: string;
    amountRounded: number;
    /**
     * Construct the data object from the BalancesTransferEvent event
     * @param event The BalancesTransferEvent event
     */
    constructor(event: Event);
}
/**
 *  This class represents the on-chain BalancesEndowedEvent event.
 */
export declare class BalancesEndowedEvent extends BlockchainEvent {
    account: string;
    freeBalance: string;
    freeBalanceRounded: number;
    /**
     * Construct the data object from the BalancesEndowedEvent event
     * @param event The BalancesEndowedEvent event
     */
    constructor(event: Event);
}
/**
 * This class represents the on-chain TreasuryDepositEvent event.
 */
export declare class TreasuryDepositEvent extends BlockchainEvent {
    value: string;
    valueRounded: number;
    /**
     * Construct the data object the TreasuryDepositEvent event
     * @param event The TreasuryDepositEvent event
     */
    constructor(event: Event);
}
/**
 * This class represents the on-chain NFTCreatedEvent event.
 */
export declare class NFTCreatedEvent extends BlockchainEvent {
    nftId: number;
    owner: string;
    offchainData: string;
    royalty: number;
    collectionId: number | null;
    isSoulbound: boolean;
    mintFee: string;
    mintFeeRounded: number;
    /**
     * Construct the data object from the NFTCreatedEvent event
     * @param event The NFTCreatedEvent event
     */
    constructor(event: Event);
}
export declare class SecretAddedToNFTEvent extends BlockchainEvent {
    nftId: number;
    offchainData: string;
    /**
     * Construct the data object from the SecretAddedToNFTEvent event
     * @param event The SecretAddedToNFTEvent event
     */
    constructor(event: Event);
}
/**
 * This class represents the on-chain NFTBurnedEvent event.
 */
export declare class NFTBurnedEvent extends BlockchainEvent {
    nftId: number;
    /**
     * Construct the data object from the NFTBurnedEvent event
     * @param event The NFTBurnedEvent event
     */
    constructor(event: Event);
}
/**
 * This class represents the on-chain NFTDelegatedEvent event.
 */
export declare class NFTDelegatedEvent extends BlockchainEvent {
    nftId: number;
    recipient: string | null;
    /**
     * Construct the data object from the NFTDelegatedEvent event
     * @param event The NFTDelegatedEvent event
     */
    constructor(event: Event);
}
/**
 * This class represents the on-chain NFTRoyaltySetEvent event.
 */
export declare class NFTRoyaltySetEvent extends BlockchainEvent {
    nftId: number;
    royalty: number;
    /**
     * Construct the data object from the NFTRoyaltySetEvent event
     * @param event The NFTRoyaltySetEvent event
     */
    constructor(event: Event);
}
/**
 * This class represents the on-chain NFTTransferredEvent event.
 */
export declare class NFTTransferredEvent extends BlockchainEvent {
    nftId: number;
    sender: string;
    recipient: string;
    /**
     * Construct the data object from the NFTTransferredEvent event
     * @param event The NFTTransferredEvent event
     */
    constructor(event: Event);
}
/**
 * This class represents the on-chain NFTAddedToCollectionEvent event.
 */
export declare class NFTAddedToCollectionEvent extends BlockchainEvent {
    nftId: number;
    collectionId: number;
    /**
     * Construct the data object from the NFTAddedToCollectionEvent event
     * @param event The NFTAddedToCollectionEvent event
     */
    constructor(event: Event);
}
/**
 * This class represents the on-chain CollectionCreatedEvent event.
 */
export declare class CollectionCreatedEvent extends BlockchainEvent {
    collectionId: number;
    owner: string;
    offchainData: string;
    limit: number | null;
    /**
     * Construct the data object from the CollectionCreatedEvent event
     * @param event The CollectionCreatedEvent event
     */
    constructor(event: Event);
}
/**
 * This class represents the on-chain blockchain CollectionLimitedEvent event.
 */
export declare class CollectionLimitedEvent extends BlockchainEvent {
    collectionId: number;
    limit: number;
    /**
     * Construct the data object from the CollectionLimitedEvent event
     * @param event The CollectionLimitedEvent event
     */
    constructor(event: Event);
}
/**
 * This class represents the on-chain CollectionClosedEvent event.
 */
export declare class CollectionClosedEvent extends BlockchainEvent {
    collectionId: number;
    /**
     * Construct the data object from theCollectionClosedEvent event
     * @param event The CollectionClosedEvent event
     */
    constructor(event: Event);
}
/**
 * This class represents the on-chain CollectionBurnedEvent event.
 */
export declare class CollectionBurnedEvent extends BlockchainEvent {
    collectionId: number;
    /**
     * Construct the data object from the CollectionBurnedEvent event
     * @param event The CollectionBurnedEvent event
     */
    constructor(event: Event);
}
/**
 * This class represents the on-chain CollectionBurnedEvent event.
 */
export declare class CollectionOffchainDataSetEvent extends BlockchainEvent {
    collectionId: number;
    offchainData: string;
    /**
     * Construct the data object from the CollectionBurnedEvent event
     * @param event The CollectionBurnedEvent event
     */
    constructor(event: Event);
}
/**
 * This class represents the on-chain NFTConvertedToCapsuleEvent event.
 */
export declare class NFTConvertedToCapsuleEvent extends BlockchainEvent {
    nftId: number;
    offchainData: string;
    /**
     * Construct the data object from the NFTConvertedToCapsuleEvent event
     * @param event The NFTConvertedToCapsuleEvent event
     */
    constructor(event: Event);
}
/**
 * This class represents the on-chain CapsuleOffchainDataSetEvent event.
 */
export declare class CapsuleOffchainDataSetEvent extends BlockchainEvent {
    nftId: number;
    offchainData: string;
    /**
     * Construct the data object from the CapsuleOffchainDataSetEvent event
     * @param event The CapsuleOffchainDataSetEvent event
     */
    constructor(event: Event);
}
/**
 * This class represents the on-chain CapsuleKeyUpdateNotifiedEvent event.
 */
export declare class CapsuleKeyUpdateNotifiedEvent extends BlockchainEvent {
    nftId: number;
    /**
     * Construct the data object from the CapsuleKeyUpdateNotifiedEvent event
     * @param event The CapsuleKeyUpdateNotifiedEvent event
     */
    constructor(event: Event);
}
/**
 * This class represents the on-chain CapsuleRevertedEvent event.
 */
export declare class CapsuleRevertedEvent extends BlockchainEvent {
    nftId: number;
    /**
     * Construct the data object from the CapsuleRevertedEvent event
     * @param event The CapsuleRevertedEvent event
     */
    constructor(event: Event);
}
/**
 * This class represents the on-chain ProtocolSetEvent event.
 */
export declare class ProtocolSetEvent extends BlockchainEvent {
    nftId: number;
    recipient: string;
    protocol: Protocols;
    cancellation: TransmissionCancellation;
    /**
     * Construct the data object from the ProtocolSetEvent event
     * @param event The ProtocolSetEvent event
     */
    constructor(event: Event);
}
/**
 * This class represents the on-chain ProtocolRemovedEvent event.
 */
export declare class ProtocolRemovedEvent extends BlockchainEvent {
    nftId: number;
    /**
     * Construct the data object from the ProtocolRemovedEvent event
     * @param event The ProtocolRemovedEvent event
     */
    constructor(event: Event);
}
/**
 * This class represents the on-chain TimerResetEvent event.
 */
export declare class TimerResetEvent extends BlockchainEvent {
    nftId: number;
    newBlockNumber: number;
    /**
     * Construct the data object from the TimerResetEvent event
     * @param event The TimerResetEvent event
     */
    constructor(event: Event);
}
/**
 * This class represents the on-chain ConsentAddedEvent event.
 */
export declare class ConsentAddedEvent extends BlockchainEvent {
    nftId: number;
    from: string;
    /**
     * Construct the data object from the ConsentAddedEvent event
     * @param event The ConsentAddedEvent event
     */
    constructor(event: Event);
}
/**
 * This class represents the on-chain ThresholdReachedEvent event.
 */
export declare class ThresholdReachedEvent extends BlockchainEvent {
    nftId: number;
    /**
     * Construct the data object from the ThresholdReachedEvent event
     * @param event The ThresholdReachedEvent event
     */
    constructor(event: Event);
}
/**
 * This class represents the on-chain TransmittedEvent event.
 */
export declare class TransmittedEvent extends BlockchainEvent {
    nftId: number;
    /**
     * Construct the data object from the TransmittedEvent event
     * @param event The TransmittedEvent event
     */
    constructor(event: Event);
}
/**
 * This class represents the on-chain MetricsServerReportSubmitted event.
 */
export declare class MetricsServerReportSubmittedEvent extends BlockchainEvent {
    era: number;
    operatorAddress: string;
    metricsServerReport: ReportParamsType;
    /**
     * Construct the data object from the MetricsServerReportSubmittedEvent event
     * @param event The MetricsServerReportSubmittedEvent event
     */
    constructor(event: Event);
}
/**
 * This class represents the on-chain RewardsClaimed event.
 */
export declare class RewardsClaimedEvent extends BlockchainEvent {
    era: number;
    operatorAddress: string;
    amount: string | number;
    amountRounded: number;
    /**
     * Construct the data object from the RewardsClaimedEvent event
     * @param event The RewardsClaimedEvent event
     */
    constructor(event: Event);
}
/**
 * This class represents the on-chain ContractCreatedEvent event.
 */
export declare class ContractCreatedEvent extends BlockchainEvent {
    nftId: number;
    renter: string;
    creationBlockId: number;
    duration: DurationType;
    acceptanceType: AcceptanceAction;
    acceptanceList: string[] | null;
    renterCanRevoke: boolean;
    rentFeeType: RentFeeAction;
    rentFee: string | number;
    rentFeeRounded: number;
    renterCancellationFeeType: CancellationFeeAction;
    renterCancellationFee?: string | number | null;
    renterCancellationFeeRounded?: number | null;
    renteeCancellationFeeType: CancellationFeeAction;
    renteeCancellationFee?: string | number | null;
    renteeCancellationFeeRounded?: number | null;
    /**
     * Construct the data object from the ContractCreatedEvent event
     * @param event The ContractCreatedEvent event
     */
    constructor(event: Event);
}
/**
 * This class represents the on-chain ContractCanceledEvent event.
 */
export declare class ContractCanceledEvent extends BlockchainEvent {
    nftId: number;
    /**
     * Construct the data object from the ContractCanceledEvent event
     * @param event The ContractCanceledEvent event
     */
    constructor(event: Event);
}
/**
 * This class represents the on-chain ContractStartedEvent event.
 */
export declare class ContractStartedEvent extends BlockchainEvent {
    nftId: number;
    rentee: string;
    /**
     * Construct the data object from the ContractStartedEvent event
     * @param event The ContractStartedEvent event
     */
    constructor(event: Event);
}
/**
 * This class represents the on-chain ContractRevokedEvent event.
 */
export declare class ContractRevokedEvent extends BlockchainEvent {
    nftId: number;
    revokedBy: string;
    /**
     * Construct the data object from the ContractRevokedEvent event
     * @param event The ContractRevokedEvent event
     */
    constructor(event: Event);
}
/**
 * This class represents the on-chain ContractOfferCreatedEvent event.
 */
export declare class ContractOfferCreatedEvent extends BlockchainEvent {
    nftId: number;
    rentee: string;
    /**
     * Construct the data object from the ContractOfferCreatedEvent event
     * @param event The ContractOfferCreatedEvent event
     */
    constructor(event: Event);
}
/**
 * This class represents the on-chain ContractOfferRetractedEvent event.
 */
export declare class ContractOfferRetractedEvent extends BlockchainEvent {
    nftId: number;
    rentee: string;
    /**
     * Construct the data object from the ContractOfferRetractedEvent event
     * @param event The ContractOfferRetractedEvent event
     */
    constructor(event: Event);
}
/**
 * This class represents the on-chain ContractSubscriptionTermsChangedEvent event.
 */
export declare class ContractSubscriptionTermsChangedEvent extends BlockchainEvent {
    nftId: number;
    period: number;
    maxDuration: number;
    isChangeable: boolean;
    rentFeeType: string;
    rentFee: string | number;
    rentFeeRounded: number;
    /**
     * Construct the data object from the ContractSubscriptionTermsChangedEvent event
     * @param event The ContractSubscriptionTermsChangedEvent event
     */
    constructor(event: Event);
}
/**
 * This class represents the on-chain ContractSubscriptionTermsAcceptedEvent event.
 */
export declare class ContractSubscriptionTermsAcceptedEvent extends BlockchainEvent {
    nftId: number;
    /**
     * Construct the data object from the ContractSubscriptionTermsAcceptedEvent event
     * @param event The ContractSubscriptionTermsAcceptedEvent event
     */
    constructor(event: Event);
}
/**
 * This class represents the on-chain ContractEndedEvent event.
 */
export declare class ContractEndedEvent extends BlockchainEvent {
    nftId: number;
    revokedBy: string;
    /**
     * Construct the data object from the ContractEndedEvent event
     * @param event The ContractEndedEvent event
     */
    constructor(event: Event);
}
/**
 * This class represents the on-chain ContractSubscriptionPeriodStartedEvent event.
 */
export declare class ContractSubscriptionPeriodStartedEvent extends BlockchainEvent {
    nftId: number;
    /**
     * Construct the data object from the ContractSubscriptionPeriodStartedEvent event
     * @param event The ContractSubscriptionPeriodStartedEvent event
     */
    constructor(event: Event);
}
/**
 * This class represents the on-chain ContractExpiredEvent event.
 */
export declare class ContractExpiredEvent extends BlockchainEvent {
    nftId: number;
    /**
     * Construct the data object from the ContractExpiredEvent event
     * @param event The ContractExpiredEvent event
     */
    constructor(event: Event);
}
/**
 * This class represents the on-chain MarketplaceCreatedEvent event.
 */
export declare class MarketplaceCreatedEvent extends BlockchainEvent {
    marketplaceId: number;
    owner: string;
    kind: MarketplaceKind;
    /**
     * Construct the data object from MarketplaceCreatedEvent event
     * @param event The MarketplaceCreatedEvent event
     */
    constructor(event: Event);
}
/**
 * This class represents the on-chain MarketplaceConfigSetEvent event.
 */
export declare class MarketplaceConfigSetEvent extends BlockchainEvent {
    marketplaceId: number;
    commissionFeeType?: string | null;
    commissionFee?: string | null;
    commissionFeeRounded?: number | null;
    listingFeeType?: string | null;
    listingFee?: string | null;
    listingFeeRounded?: number | null;
    accountList?: string[];
    offchainData?: string | null;
    collectionList?: number[] | null;
    /**
     * Construct the data object from MarketplaceConfigSetEvent event
     * @param event The MarketplaceConfigSetEvent event
     */
    constructor(event: Event);
}
/**
 * This class represents the on-chain MarketplaceOwnerSetEvent event.
 */
export declare class MarketplaceOwnerSetEvent extends BlockchainEvent {
    marketplaceId: number;
    owner: string;
    /**
     * Construct the data object from MarketplaceOwnerSetEvent event
     * @param event The MarketplaceOwnerSetEvent event
     */
    constructor(event: Event);
}
/**
 * This class represents the on-chain MarketplaceKindSetEvent event.
 */
export declare class MarketplaceKindSetEvent extends BlockchainEvent {
    marketplaceId: number;
    kind: MarketplaceKind;
    /**
     * Construct the data object from MarketplaceKindSetEvent event
     * @param event The MarketplaceKindSetEvent event
     */
    constructor(event: Event);
}
/**
 * This class represents the on-chain MarketplaceMintFeeSetEvent event.
 */
export declare class MarketplaceMintFeeSetEvent extends BlockchainEvent {
    fee: string;
    feeRounded: number;
    /**
     * Construct the data object from MarketplaceMintFeeSetEvent event
     * @param event The MarketplaceMintFeeSetEvent event
     */
    constructor(event: Event);
}
/**
 * This class represents the on-chain NFTListedEvent event.
 */
export declare class NFTListedEvent extends BlockchainEvent {
    nftId: number;
    marketplaceId: number;
    price: string;
    priceRounded: number;
    commissionFeeType?: string | null;
    commissionFee?: string | null;
    commissionFeeRounded?: number | null;
    /**
     * Construct the data object from NFTListedEvent event
     * @param event The NFTListedEvent event
     */
    constructor(event: Event);
}
/**
 * This class represents the on-chain NFTUnlistedEvent event.
 */
export declare class NFTUnlistedEvent extends BlockchainEvent {
    nftId: number;
    /**
     * Construct the data object from NFTUnlistedEvent event
     * @param event The NFTUnlistedEvent event
     */
    constructor(event: Event);
}
/**
 * This class represents the on-chain NFTSoldEvent event.
 */
export declare class NFTSoldEvent extends BlockchainEvent {
    nftId: number;
    marketplaceId: number;
    buyer: string;
    listedPrice: string;
    listedPriceRounded: number;
    marketplaceCut: string;
    marketplaceCutRounded: number;
    royaltyCut: string;
    royaltyCutRounded: number;
    /**
     * Construct the data object from NFTSoldEvent event
     * @param event The NFTSoldEvent event
     */
    constructor(event: Event);
}
/**
 * This class represents the on-chain AuctionCreatedEvent event.
 */
export declare class AuctionCreatedEvent extends BlockchainEvent {
    nftId: number;
    marketplaceId: number;
    creator: string;
    startPrice: string;
    startPriceRounded: number;
    buyItPrice: string;
    buyItPriceRounded: number;
    startBlock: number;
    endBlock: number;
    /**
     * Construct the data object from the AuctionCreatedEvent event
     * @param event The AuctionCreatedEvent event
     */
    constructor(event: Event);
}
/**
 * This class represents the on-chain AuctionCancelledEvent event.
 */
export declare class AuctionCancelledEvent extends BlockchainEvent {
    nftId: number;
    /**
     * Construct the data object from the AuctionCancelledEvent event
     * @param event The AuctionCancelledEvent event
     */
    constructor(event: Event);
}
/**
 * This class represents the on-chain AuctionCompleted event.
 */
export declare class AuctionCompletedEvent extends BlockchainEvent {
    nftId: number;
    newOwner: string;
    amount: string;
    amountRounded: number;
    marketplaceCut: string;
    marketplaceCutRounded: number;
    royaltyCut: string;
    royaltyCutRounded: number;
    /**
     * Construct the data object from the AuctionCompleted event
     * @param event The AuctionCompleted event
     */
    constructor(event: Event);
}
/**
 * This class represents the on-chain BidAdded event.
 */
export declare class BidAddedEvent extends BlockchainEvent {
    nftId: number;
    bidder: string;
    amount: string;
    amountRounded: number;
    /**
     * Construct the data object from the BidAdded event
     * @param event The BidAdded event
     */
    constructor(event: Event);
}
/**
 * This class represents the on-chain BidRemoved event.
 */
export declare class BidRemovedEvent extends BlockchainEvent {
    nftId: number;
    bidder: string;
    amount: string;
    amountRounded: number;
    /**
     * Construct the data object from the BidRemoved event
     * @param event The BidRemoved event
     */
    constructor(event: Event);
}
/**
 * This class represents the on-chain BalanceClaimed event.
 */
export declare class BalanceClaimedEvent extends BlockchainEvent {
    account: string;
    amount: string;
    amountRounded: number;
    /**
     * Construct the data object from the BalanceClaimed event
     * @param event The BalanceClaimed event
     */
    constructor(event: Event);
}
/**
 * This class represents the on-chain ItemCompletedEvent event,
 * when a single item within a Batch of dispatches has completed with no error.
 */
export declare class ItemCompletedEvent extends BlockchainEvent {
    /**
     * Construct the data object from the ItemCompletedEvent event
     * @param event The ItemCompletedEvent event
     */
    constructor(event: Event);
}
/**
 * This class represents the on-chain ItemFailedEvent event,
 * when a single item within a Batch of dispatches has completed with error. .
 */
export declare class ItemFailedEvent extends BlockchainEvent {
    error: {
        module: {
            index: number;
            error: string;
        };
    };
    errorType: string;
    errorDetails: string;
    /**
     * Construct the data object from the ItemFailedEvent event
     * @param event The ItemFailedEvent event
     */
    constructor(event: Event);
}
/**
 * This class represents the on-chain BatchInterruptedEvent event,
 * when a batch of dispatches did not complete fully.
 */
export declare class BatchInterruptedEvent extends BlockchainEvent {
    index: number;
    dispatchError: {
        module: {
            index: number;
            error: string;
        };
    };
    errorType: string;
    details: string;
    /**
     * Construct the data object from the BatchInterruptedEvent event
     * @param event The BatchInterruptedEvent event
     */
    constructor(event: Event);
}
/**
 * This class represents the on-chain BatchCompletedWithErrorsEvent event,
 * when a batch of dispatches completed but has errors.
 */
export declare class BatchCompletedWithErrorsEvent extends BlockchainEvent {
    /**
     * Construct the data object from the BatchCompletedWithErrorsEvent event
     * @param event The BatchCompletedWithErrorsEvent event
     */
    constructor(event: Event);
}
/**
 * This class represents the on-chain BatchInterruptedEvent event,
 * when a batch of dispatches completed fully with no error.
 */
export declare class BatchCompletedEvent extends BlockchainEvent {
    /**
     * Construct the data object from the BatchCompletedEvent event
     * @param event The BatchCompletedEvent event
     */
    constructor(event: Event);
}
/**
 * This class represents the on-chain ExtrinsicFailedEvent event,
 * when an extrinsic failed.
 */
export declare class ExtrinsicFailedEvent extends BlockchainEvent {
    dispatchError: {
        module: {
            index: number;
            error: string;
        };
    };
    errorType: string;
    details: string;
    dispatchInfo: {
        weigth: string;
        class: string;
        paysFee: string;
    };
    /**
     * Construct the data object from the ExtrinsicFailedEvent event
     * @param event The ExtrinsicFailedEvent event
     */
    constructor(event: Event);
}
/**
 * This class represents the on-chain ExtrinsicSuccessEvent event,
 * when an extrinsic completed successfully.
 */
export declare class ExtrinsicSuccessEvent extends BlockchainEvent {
    dispatchInfo: {
        weigth: string;
        class: string;
        paysFee: string;
    };
    /**
     * Construct the data object from the ExtrinsicSuccessEvent event
     * @param event The ExtrinsicSuccessEvent event
     */
    constructor(event: Event);
}
/**
 * This class represents the on-chain NewAccountEvent event,
 * when a new account was created.
 */
export declare class NewAccountEvent extends BlockchainEvent {
    account: string;
    /**
     * Construct the data object from the NewAccountEvent event
     * @param event The NewAccountEvent event
     */
    constructor(event: Event);
}
/**
 * This class represents the on-chain UnknownEvent event,
 */
export declare class UnknownEvent extends BlockchainEvent {
    /**
     * Construct the data object from UnknownEvent event
     * @param event The UnknownEvent event
     */
    constructor(event: Event);
}
export declare class BlockchainEvents {
    inner: BlockchainEvent[];
    constructor(events: BlockchainEvent[]);
    findEvents<T extends BlockchainEvent>(ctor: new (...args: any[]) => T): T[];
    findEvent<T extends BlockchainEvent>(ctor: new (...args: any[]) => T): T | undefined;
    findEventOrThrow<T extends BlockchainEvent>(ctor: new (...args: any[]) => T): T;
}
