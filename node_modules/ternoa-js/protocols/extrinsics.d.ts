import { IKeyringPair } from "@polkadot/types/types";
import { ConsentAddedEvent, ProtocolRemovedEvent, ProtocolSetEvent, TimerResetEvent } from "../events";
import { TransactionHashType } from "../blockchain";
import { WaitUntil } from "../constants";
import { Protocols, TransmissionCancellation } from "./types";
/**
 * @name setTransmissionProtocolTx
 * @summary    		              Creates an unsigned unsubmittedSet-Transmission-Protocol Transaction Hash.
 * @param nftId		              The NFT Id to add transmission protocol.
 * @param recipient            	The destination account.
 * @param protocol 	            The transmission protocol to execute.
 * @param protocolCancellation 	the cancellation period of the transmission protocol.
 * @returns  		                Unsigned unsubmitted Set-Transmission-Protocol Transaction Hash. The Hash is only valid for 5 minutes.
 */
export declare const setTransmissionProtocolTx: (nftId: number, recipient: string, protocol: Protocols, protocolCancellation: TransmissionCancellation) => Promise<TransactionHashType>;
/**
 * @name setTransmissionProtocol
 * @summary    		              Adds a transmission protocol to any type of NFT.
 * @param nftId		              The NFT Id to add transmission protocol.
 * @param recipient            	The destination account.
 * @param protocol 	            The transmission protocol to execute.
 * @param protocolCancellation 	the cancellation period of the transmission protocol.
 * @param keyring               Account that will sign the transaction.
 * @param waitUntil             Execution trigger that can be set either to BlockInclusion or BlockFinalization.
 * @returns  		                ProtocolSetEvent Blockchain event.
 */
export declare const setTransmissionProtocol: (nftId: number, recipient: string, protocol: Protocols, protocolCancellation: TransmissionCancellation, keyring: IKeyringPair, waitUntil: WaitUntil) => Promise<ProtocolSetEvent>;
/**
 * @name removeTransmissionProtocolTx
 * @summary    		               Creates an unsigned unsubmitted Remove-Transmission-Protocol Transaction Hash for a transmission protocol.
 * @param nftId		               The NFT Id to remove the transmission protocol.
 * @returns  		                 Unsigned unsubmitted Remove-Transmission-Protocol Transaction Hash. The Hash is only valid for 5 minutes.
 */
export declare const removeTransmissionProtocolTx: (nftId: number) => Promise<TransactionHashType>;
/**
 * @name removeTransmissionProtocol
 * @summary    		               Removes a transmission protocol from an NFT.
 * @param nftId		               The NFT Id to remove the transmission protocol.
 * @param keyring                Account that will sign the transaction.
 * @param waitUntil              Execution trigger that can be set either to BlockInclusion or BlockFinalization.
 * @returns  		                 ProtocolRemovedEvent Blockchain event.
 */
export declare const removeTransmissionProtocol: (nftId: number, keyring: IKeyringPair, waitUntil: WaitUntil) => Promise<ProtocolRemovedEvent>;
/**
 * @name resetTransmissionProtocolTimerTx
 * @summary    		                Creates an unsigned unsubmitted Reset-Timer Transaction Hash for an AtBlockWithReset protocol.
 * @param nftId		                The NFT Id to reset the timer for an AtBlockWithReset protocol.
 * @param blockNumber 	          The new blockNumber to execute the AtBlockWithReset protocol.
 * @returns  		                  Unsigned unsubmitted Reset-Timer Transaction Hash. The Hash is only valid for 5 minutes.
 */
export declare const resetTransmissionProtocolTimerTx: (nftId: number, blockNumber: number) => Promise<TransactionHashType>;
/**
 * @name resetTransmissionProtocolTimer
 * @summary    		                Resets the block execution of the transmission protocol.
 * @param nftId		                The NFT Id to remove the transmission protocol.
 * @param blockNumber 	          The new blockNumber to execute the AtBlockWithReset protocol.
 * @param keyring                 Account that will sign the transaction.
 * @param waitUntil               Execution trigger that can be set either to BlockInclusion or BlockFinalization.
 * @returns  		                  TimerResetEvent Blockchain event.
 */
export declare const resetTransmissionProtocolTimer: (nftId: number, blockNumber: number, keyring: IKeyringPair, waitUntil: WaitUntil) => Promise<TimerResetEvent>;
/**
 * @name addConsentToOnConsentProtocolTx
 * @summary    		                Creates an unsigned unsubmitted Add-Consent Transaction Hash for an OnConsent protocol.
 * @param nftId		                The NFT Id expecting consent to be added by user.
 * @returns  		                  Unsigned unsubmitted Add-Consent Transaction Hash. The Hash is only valid for 5 minutes.
 */
export declare const addConsentToOnConsentProtocolTx: (nftId: number) => Promise<TransactionHashType>;
/**
 * @name addConsentToOnConsentProtocol
 * @summary    		                Adds user consent to transmit the NFT (for users specified in the account list for OnConsent protocol only)
 * @param nftId		                The NFT Id expecting consent to be added by user.
 * @param keyring                 Account that will sign the transaction.
 * @param waitUntil               Execution trigger that can be set either to BlockInclusion or BlockFinalization.
 * @returns  		                  ConsentAddedEvent Blockchain event.
 */
export declare const addConsentToOnConsentProtocol: (nftId: number, keyring: IKeyringPair, waitUntil: WaitUntil) => Promise<ConsentAddedEvent>;
