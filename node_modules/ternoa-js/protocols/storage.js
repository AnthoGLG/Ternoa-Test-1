"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getTransmissionOnConsentData = exports.getTransmissions = exports.getTransmissionAtBlockQueue = exports.getTransmissionOnConsentAtBlockFee = exports.getTransmissionOnConsentFee = exports.getTransmissionAtBlockWithResetFee = exports.getTransmissionAtBlockFee = void 0;
const blockchain_1 = require("../blockchain");
const constants_1 = require("../constants");
/**
 * @name getTransmissionAtBlockFee
 * @summary Fee to set an AtBlock protocol. (extra fee on top of the tx fees).
 * @returns Transmission at block protocol fee.
 */
const getTransmissionAtBlockFee = () => __awaiter(void 0, void 0, void 0, function* () {
    const fee = yield (0, blockchain_1.query)(constants_1.txPallets.transmissionProtocols, constants_1.chainQuery.atBlockFee);
    return fee;
});
exports.getTransmissionAtBlockFee = getTransmissionAtBlockFee;
/**
 * @name getTransmissionAtBlockWithResetFee
 * @summary Fee to set an AtBlockWithReset protocol. (extra fee on top of the tx fees).
 * @returns Transmission at block with reset protocol fee.
 */
const getTransmissionAtBlockWithResetFee = () => __awaiter(void 0, void 0, void 0, function* () {
    const fee = yield (0, blockchain_1.query)(constants_1.txPallets.transmissionProtocols, constants_1.chainQuery.atBlockWithResetFee);
    return fee;
});
exports.getTransmissionAtBlockWithResetFee = getTransmissionAtBlockWithResetFee;
/**
 * @name getTransmissionOnConsentFee
 * @summary Fee to set an OnConsentFee protocol. (extra fee on top of the tx fees).
 * @returns Transmission on consent protocol fee.
 */
const getTransmissionOnConsentFee = () => __awaiter(void 0, void 0, void 0, function* () {
    const fee = yield (0, blockchain_1.query)(constants_1.txPallets.transmissionProtocols, constants_1.chainQuery.onConsentFee);
    return fee;
});
exports.getTransmissionOnConsentFee = getTransmissionOnConsentFee;
/**
 * @name getTransmissionOnConsentAtBlockFee
 * @summary Fee to set an OnConsentAtBlockFee protocol. (extra fee on top of the tx fees).
 * @returns Transmission on consent at block protocol fee.
 */
const getTransmissionOnConsentAtBlockFee = () => __awaiter(void 0, void 0, void 0, function* () {
    const fee = yield (0, blockchain_1.query)(constants_1.txPallets.transmissionProtocols, constants_1.chainQuery.onConsentAtBlockFee);
    return fee;
});
exports.getTransmissionOnConsentAtBlockFee = getTransmissionOnConsentAtBlockFee;
/**
 * @name getTransmissionAtBlockQueue
 * @summary         Provides the deadlines related to at block transmission protocols in queues.
 * @returns         An array of objects containing data related to tranmission queues.
 */
const getTransmissionAtBlockQueue = () => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const data = (yield (0, blockchain_1.query)(constants_1.txPallets.transmissionProtocols, constants_1.chainQuery.atBlockQueue)).toJSON();
        return data.map((queue) => ({
            nftId: queue[0],
            blockNumber: queue[1],
        }));
    }
    catch (error) {
        throw new Error(`${constants_1.Errors.TRANSMISSION_PROTOCOL_CONVERSION_ERROR}`);
    }
});
exports.getTransmissionAtBlockQueue = getTransmissionAtBlockQueue;
/**
 * @name getTransmissions
 * @summary         Provides the data of a set transmission protocol.
 * @param nftId     The ID of the NFT to be transmitted.
 * @returns         An object containing data related to a tranmission protocol.
 */
const getTransmissions = (nftId) => __awaiter(void 0, void 0, void 0, function* () {
    const data = yield (0, blockchain_1.query)(constants_1.txPallets.transmissionProtocols, constants_1.chainQuery.transmissions, [nftId]);
    return data.toJSON();
});
exports.getTransmissions = getTransmissions;
/**
 * @name getTransmissionOnConsentData
 * @summary       Provides the list of address that gave their consent to a transmission protocol.
 * @param nftId   The ID of the NFT to check address that gave their consent.
 * @returns       An array of the account address that gave their consent.
 */
const getTransmissionOnConsentData = (nftId) => __awaiter(void 0, void 0, void 0, function* () {
    const data = (yield (0, blockchain_1.query)(constants_1.txPallets.transmissionProtocols, constants_1.chainQuery.onConsentData, [nftId])).toJSON();
    return data;
});
exports.getTransmissionOnConsentData = getTransmissionOnConsentData;
