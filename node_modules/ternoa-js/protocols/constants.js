"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getMaxBlockDuration = exports.getMaxConsentListSize = exports.getSimultaneousTransmissionLimit = exports.getProtocolsActionsInBlockLimit = void 0;
const blockchain_1 = require("../blockchain");
const constants_1 = require("../constants");
/**
 * @name getProtocolsActionsInBlockLimit
 * @summary Maximum number of actions in one block.
 * @returns Number.
 */
const getProtocolsActionsInBlockLimit = () => {
    const limit = (0, blockchain_1.consts)(constants_1.txPallets.transmissionProtocols, constants_1.chainConstants.actionsInBlockLimit);
    return Number(limit.toString());
};
exports.getProtocolsActionsInBlockLimit = getProtocolsActionsInBlockLimit;
/**
 * @name getSimultaneousTransmissionLimit
 * @summary Maximum number of simultaneous transmission protocol.
 * @returns Number.
 */
const getSimultaneousTransmissionLimit = () => {
    const limit = (0, blockchain_1.consts)(constants_1.txPallets.transmissionProtocols, constants_1.chainConstants.simultaneousTransmissionLimit);
    return Number(limit.toString());
};
exports.getSimultaneousTransmissionLimit = getSimultaneousTransmissionLimit;
/**
 * @name getMaxConsentListSize
 * @summary Maximum size for the consent list.
 * @returns Number.
 */
const getMaxConsentListSize = () => {
    const size = (0, blockchain_1.consts)(constants_1.txPallets.transmissionProtocols, constants_1.chainConstants.maxConsentListSize);
    return Number(size.toString());
};
exports.getMaxConsentListSize = getMaxConsentListSize;
/**
 * @name getMaxBlockDuration
 * @summary Maximum block duration for a protocol.
 * @returns Number.
 */
const getMaxBlockDuration = () => {
    const block = (0, blockchain_1.consts)(constants_1.txPallets.transmissionProtocols, constants_1.chainConstants.maxBlockDuration);
    return Number(block.toString());
};
exports.getMaxBlockDuration = getMaxBlockDuration;
