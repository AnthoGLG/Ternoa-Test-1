import { IKeyringPair } from "@polkadot/types/types";
import BN from "bn.js";
import { TransactionHashType } from "../blockchain";
import { WaitUntil } from "../constants";
import { AuctionCancelledEvent, AuctionCompletedEvent, AuctionCreatedEvent, BalanceClaimedEvent, BidAddedEvent, BidRemovedEvent } from "../events";
/**
 * @name createAuctionTx
 * @summary               Creates an auction for an NFT.
 * @param nftId           The ID of the NFT.
 * @param marketplaceId   The ID of the marketplace where the auction will take place.
 * @param startBlock      The ID of the block at which the auction starts.
 * @param endBlock        The ID of the block at which the auction ends.
 * @param startPrice      The price at which the auction starts.
 * @param buyItPrice      The price to directly buy the NFT before the auction starts. Optional Parameter.
 * @returns               Unsigned unsubmitted Create-Auction Transaction Hash. The Hash is only valid for 5 minutes.
 */
export declare const createAuctionTx: (nftId: number, marketplaceId: number, startBlock: number, endBlock: number, startPrice: number | BN, buyItPrice?: number | BN | undefined) => Promise<TransactionHashType>;
/**
 * @name createAuction
 * @summary               Creates an auction for an NFT.
 * @param nftId           The ID of the NFT.
 * @param marketplaceId   The ID of the marketplace where the auction will take place.
 * @param startBlock      The ID of the block at which the auction starts.
 * @param endBlock        The ID of the block at which the auction ends.
 * @param startPrice      The price at which the auction starts.
 * @param buyItPrice      The price to directly buy the NFT before the auction starts. Optional Parameter.
 * @param keyring         Account that will sign the transaction.
 * @param waitUntil       Execution trigger that can be set either to BlockInclusion or BlockFinalization.
 * @returns               AuctionCreatedEvent Blockchain event.
 */
export declare const createAuction: (nftId: number, marketplaceId: number, startBlock: number, endBlock: number, startPrice: number | BN, buyItPrice: number | BN | undefined, keyring: IKeyringPair, waitUntil: WaitUntil) => Promise<AuctionCreatedEvent>;
/**
 * @name cancelAuctionTx
 * @summary       Cancels an auction for an NFT. This transaction can only be submitted if the auction has not started yet.
 * @param nftId   The ID of the NFT.
 * @returns       Unsigned unsubmitted Cancel-Auction Transaction Hash. The Hash is only valid for 5 minutes.
 */
export declare const cancelAuctionTx: (nftId: number) => Promise<TransactionHashType>;
/**
 * @name cancelAuction
 * @summary               Cancels an auction for an NFT.
 * @param nftId           The ID of the NFT.
 * @param keyring         Account that will sign the transaction.
 * @param waitUntil       Execution trigger that can be set either to BlockInclusion or BlockFinalization.
 * @returns               AuctionCancelledEvent Blockchain event.
 */
export declare const cancelAuction: (nftId: number, keyring: IKeyringPair, waitUntil: WaitUntil) => Promise<AuctionCancelledEvent>;
/**
 * @name endAuctionTx
 * @summary       Ends an auction for an NFT. This transaction can only be submitted if the auction has entered the ending period.
 * @param nftId   The ID of the NFT.
 * @returns       Unsigned unsubmitted End-Auction Transaction Hash. The Hash is only valid for 5 minutes.
 */
export declare const endAuctionTx: (nftId: number) => Promise<TransactionHashType>;
/**
 * @name endAuction
 * @summary               Ends an auction for an NFT
 * @param nftId           The ID of the NFT.
 * @param keyring         Account that will sign the transaction.
 * @param waitUntil       Execution trigger that can be set either to BlockInclusion or BlockFinalization.
 * @returns               AuctionCompletedEvent Blockchain event.
 */
export declare const endAuction: (nftId: number, keyring: IKeyringPair, waitUntil: WaitUntil) => Promise<AuctionCompletedEvent>;
/**
 * @name addBidTx
 * @summary       The bidder adds a new bid offer.
 * @param nftId   The ID of the NFT.
 * @param amount  The new bid added.
 * @returns       Unsigned unsubmitted Add-Bid Transaction Hash. The Hash is only valid for 5 minutes.
 */
export declare const addBidTx: (nftId: number, amount: number | BN) => Promise<TransactionHashType>;
/**
 * @name addBid
 * @summary               The bidder adds a new bid offer.
 * @param nftId           The ID of the NFT.
 * @param amount          The new bid added.
 * @param keyring         Account that will sign the transaction.
 * @param waitUntil       Execution trigger that can be set either to BlockInclusion or BlockFinalization.
 * @returns               BidAddedEvent Blockchain event.
 */
export declare const addBid: (nftId: number, amount: number | BN, keyring: IKeyringPair, waitUntil: WaitUntil) => Promise<BidAddedEvent>;
/**
 * @name removeBidTx
 * @summary       The bidder removes his bid offer.
 * @param nftId   The ID of the NFT.
 * @returns       Unsigned unsubmitted Remove-Bid Transaction Hash. The Hash is only valid for 5 minutes.
 */
export declare const removeBidTx: (nftId: number) => Promise<TransactionHashType>;
/**
 * @name removeBid
 * @summary               The bidder removes his bid offer.
 * @param nftId           The ID of the NFT.
 * @param keyring         Account that will sign the transaction.
 * @param waitUntil       Execution trigger that can be set either to BlockInclusion or BlockFinalization.
 * @returns               BidRemovedEvent Blockchain event.
 */
export declare const removeBid: (nftId: number, keyring: IKeyringPair, waitUntil: WaitUntil) => Promise<BidRemovedEvent>;
/**
 * @name buyItNowTx
 * @summary               The NFT can be directly buy if a buyItPrice was defined and the auction has not started yet.
 * @param nftId           The ID of the NFT.
 * @param nftBuyingPrice  The NFT buying price signed.
 * @returns               Unsigned unsubmitted Buy-It-Now Transaction Hash. The Hash is only valid for 5 minutes.
 */
export declare const buyItNowTx: (nftId: number, nftBuyingPrice: number | BN) => Promise<TransactionHashType>;
/**
 * @name buyItNow
 * @summary               The NFT can be directly buy if a buyItPrice was defined and the auction has not started yet.
 * @param nftId           The ID of the NFT.
 * @param nftBuyingPrice  The NFT buying price signed.
 * @param keyring         Account that will sign the transaction.
 * @param waitUntil       Execution trigger that can be set either to BlockInclusion or BlockFinalization.
 * @returns               AuctionCompletedEvent Blockchain event.
 */
export declare const buyItNow: (nftId: number, nftBuyingPrice: number | BN, keyring: IKeyringPair, waitUntil: WaitUntil) => Promise<AuctionCompletedEvent>;
/**
 * @name claimTx
 * @summary   Bidders that did not win the auction have to claim back their bids balance after an auction ends.
 * @returns   Unsigned unsubmitted Buy-It-Now Transaction Hash. The Hash is only valid for 5 minutes.
 */
export declare const claimTx: () => Promise<TransactionHashType>;
/**
 * @name claim
 * @summary               Bidders that did not win the auction have to claim back their bids balance after an auction ends.
 * @param keyring         Account that will sign the transaction.
 * @param waitUntil       Execution trigger that can be set either to BlockInclusion or BlockFinalization.
 * @returns               BalanceClaimedEvent Blockchain event.
 */
export declare const claim: (keyring: IKeyringPair, waitUntil: WaitUntil) => Promise<BalanceClaimedEvent>;
