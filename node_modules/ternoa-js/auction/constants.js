"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getParallelAuctionLimit = exports.getMaxAuctionDuration = exports.getMinAuctionDuration = exports.getMaxAuctionDelay = exports.getBidderListLengthLimit = exports.getAuctionGracePeriod = exports.getAuctionEndingPeriod = void 0;
const blockchain_1 = require("../blockchain");
const constants_1 = require("../constants");
/**
 * @name getAuctionEndingPeriod
 * @summary Period (in blocks) before the end of the auction during which an auction can be extended if new bids are added.
 * @returns Number.
 */
const getAuctionEndingPeriod = () => {
    const endingPeriod = (0, blockchain_1.consts)(constants_1.txPallets.auction, constants_1.chainConstants.auctionEndingPeriod);
    return Number.parseInt(endingPeriod.toString());
};
exports.getAuctionEndingPeriod = getAuctionEndingPeriod;
/**
 * @name getAuctionGracePeriod
 * @summary Period (in blocks) to extend an auction by if a new bid is received during the ending period.
 * @returns Number.
 */
const getAuctionGracePeriod = () => {
    const gracePeriod = (0, blockchain_1.consts)(constants_1.txPallets.auction, constants_1.chainConstants.auctionGracePeriod);
    return Number.parseInt(gracePeriod.toString());
};
exports.getAuctionGracePeriod = getAuctionGracePeriod;
/**
 * @name getBidderListLengthLimit
 * @summary Total amount of accounts that can be in the bidder list for an auction.
 * @returns Number.
 */
const getBidderListLengthLimit = () => {
    const limit = (0, blockchain_1.consts)(constants_1.txPallets.auction, constants_1.chainConstants.bidderListLengthLimit);
    return Number.parseInt(limit.toString());
};
exports.getBidderListLengthLimit = getBidderListLengthLimit;
/**
 * @name getMaxAuctionDelay
 * @summary Maximum amount of blocks between the current one and the start block of an auction.
 * @returns Number.
 */
const getMaxAuctionDelay = () => {
    const maxDelay = (0, blockchain_1.consts)(constants_1.txPallets.auction, constants_1.chainConstants.maxAuctionDelay);
    return Number.parseInt(maxDelay.toString());
};
exports.getMaxAuctionDelay = getMaxAuctionDelay;
/**
 * @name getMinAuctionDuration
 * @summary Minimum amount of blocks permitted for an auction's length.
 * @returns Number.
 */
const getMinAuctionDuration = () => {
    const minDuration = (0, blockchain_1.consts)(constants_1.txPallets.auction, constants_1.chainConstants.minAuctionDuration);
    return Number.parseInt(minDuration.toString());
};
exports.getMinAuctionDuration = getMinAuctionDuration;
/**
 * @name getMaxAuctionDuration
 * @summary Maximum amount of blocks permitted for an auction's length.
 * @returns Number.
 */
const getMaxAuctionDuration = () => {
    const maxDuration = (0, blockchain_1.consts)(constants_1.txPallets.auction, constants_1.chainConstants.maxAuctionDuration);
    return Number.parseInt(maxDuration.toString());
};
exports.getMaxAuctionDuration = getMaxAuctionDuration;
/**
 * @name getParallelAuctionLimit
 * @summary Maximum amount of auctions that can be active at the same time.
 * @returns Number.
 */
const getParallelAuctionLimit = () => {
    const limit = (0, blockchain_1.consts)(constants_1.txPallets.auction, constants_1.chainConstants.parallelAuctionLimit);
    return Number.parseInt(limit.toString());
};
exports.getParallelAuctionLimit = getParallelAuctionLimit;
