"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.acceptSubscriptionTerms = exports.acceptSubscriptionTermsTx = exports.changeSubscriptionTerms = exports.changeSubscriptionTermsTx = exports.acceptRentOffer = exports.acceptRentOfferTx = exports.retractRentOffer = exports.retractRentOfferTx = exports.makeRentOffer = exports.makeRentOfferTx = exports.rent = exports.rentTx = exports.revokeContract = exports.revokeContractTx = exports.cancelContract = exports.cancelContractTx = exports.createContract = exports.createContractTx = void 0;
const blockchain_1 = require("../blockchain");
const constants_1 = require("../constants");
const events_1 = require("../events");
const utils_1 = require("./utils");
/**
 * @name createContractTx
 * @summary                         Creates an unsigned unsubmitted Create-Rent-Contract Transaction Hash for an NFT.
 * @param nftId                     The NFT Id of the contract.
 * @param duration                  The contract duration : Fixed(EndBlock (a block number)) or Subscription(Period (a block number), MaxDuration (a block number), IsChangeable (a boolean))
 * @param acceptanceType            The type of acceptance: automatic or manual (with or without whitelist)
 * @param renterCanRevoke           A boolean to allow renter to cancel the contract once started
 * @param rentFee                   The fee to rent the contract: a token amount or an NFT
 * @param renterCancellationFee     The fee to cancel the contract (due by the renter): No Fee (None), FixedTokens amount, FlexibleTokens (only for Fixed contract) amount or an NFT
 * @param renteeCancellationFee     The fee to cancel the contract (due by the rentee): No Fee (None), FixedTokens amount, FlexibleTokens (only for Fixed contract) amount or an NFT
 * @returns                         Unsigned unsubmitted Create-Rent-Contract Transaction Hash. The Hash is only valid for 5 minutes.
 */
const createContractTx = (nftId, duration, acceptanceType, renterCanRevoke, rentFee, renterCancellationFee, renteeCancellationFee) => __awaiter(void 0, void 0, void 0, function* () {
    yield (0, utils_1.validateTransformContractFee)(rentFee);
    yield (0, utils_1.validateTransformContractFee)(renterCancellationFee);
    yield (0, utils_1.validateTransformContractFee)(renteeCancellationFee);
    return yield (0, blockchain_1.createTxHex)(constants_1.txPallets.rent, constants_1.txActions.createContract, [
        nftId,
        duration,
        acceptanceType,
        renterCanRevoke,
        rentFee,
        renterCancellationFee,
        renteeCancellationFee,
    ]);
});
exports.createContractTx = createContractTx;
/**
 * @name createContract
 * @summary                         Creates a rental contract on the chain for an NFT.
 * @param nftId                     The NFT Id of the contract.
 * @param duration                  The contract duration : Fixed(EndBlock (a block number)) or Subscription(Period (a block number), MaxDuration (a block number), IsChangeable (a boolean))
 * @param acceptanceType            The type of acceptance: automatic or manual (with or without whitelist)
 * @param renterCanRevoke           A boolean to allow renter to cancel the contract once started
 * @param rentFee                   The fee to rent the contract: a token amount or an NFT
 * @param renterCancellationFee     The fee to cancel the contract (due by the renter): No Fee (None), FixedTokens amount, FlexibleTokens (only for Fixed contract) amount or an NFT
 * @param renteeCancellationFee     The fee to cancel the contract (due by the rentee): No Fee (None), FixedTokens amount, FlexibleTokens (only for Fixed contract) amount or an NFT
 * @param keyring                   Account that will sign the transaction.
 * @param waitUntil                 Execution trigger that can be set either to BlockInclusion or BlockFinalization.
 * @returns                         ContractCreatedEvent Blockchain event.
 */
const createContract = (nftId, duration, acceptanceType, renterCanRevoke, rentFee, renterCancellationFee, renteeCancellationFee, keyring, waitUntil) => __awaiter(void 0, void 0, void 0, function* () {
    var _a;
    const tx = yield (0, exports.createContractTx)(nftId, duration, acceptanceType, renterCanRevoke, rentFee, renterCancellationFee, renteeCancellationFee);
    const { blockInfo, events } = yield (0, blockchain_1.submitTxBlocking)(tx, waitUntil, keyring);
    const creationBlockId = (_a = blockInfo.block) === null || _a === void 0 ? void 0 : _a.header.number.toNumber();
    const contractCreatedEvent = events.findEventOrThrow(events_1.ContractCreatedEvent);
    if (creationBlockId) {
        contractCreatedEvent.creationBlockId = creationBlockId;
    }
    return contractCreatedEvent;
});
exports.createContract = createContract;
/**
 * @name cancelContractTx
 * @summary               Creates an unsigned unsubmitted Cancel-Rent-Contract Transaction Hash for an NFT.
 * @param nftId           The NFT Id of the contract to cancel.
 * @returns               Unsigned unsubmitted Cancel-Rent-Contract Transaction Hash. The Hash is only valid for 5 minutes.
 */
const cancelContractTx = (nftId) => __awaiter(void 0, void 0, void 0, function* () {
    return yield (0, blockchain_1.createTxHex)(constants_1.txPallets.rent, constants_1.txActions.cancelContract, [nftId]);
});
exports.cancelContractTx = cancelContractTx;
/**
 * @name cancelContract
 * @summary               Cancels a contract that is not running.
 * @param nftId           The NFT Id of the contract to cancel.
 * @param keyring         Account that will sign the transaction.
 * @param waitUntil       Execution trigger that can be set either to BlockInclusion or BlockFinalization.
 * @returns               ContractCanceledEvent Blockchain event.
 */
const cancelContract = (nftId, keyring, waitUntil) => __awaiter(void 0, void 0, void 0, function* () {
    const tx = yield (0, exports.cancelContractTx)(nftId);
    const { events } = yield (0, blockchain_1.submitTxBlocking)(tx, waitUntil, keyring);
    return events.findEventOrThrow(events_1.ContractCanceledEvent);
});
exports.cancelContract = cancelContract;
/**
 * @name revokeContractTx
 * @summary               Creates an unsigned unsubmitted Revoke-Rent-Contract Transaction Hash for an NFT.
 * @param nftId           The NFT Id of the contract to revoke.
 * @returns               Unsigned unsubmitted Revoke-Rent-Contract Transaction Hash. The Hash is only valid for 5 minutes.
 */
const revokeContractTx = (nftId) => __awaiter(void 0, void 0, void 0, function* () {
    return yield (0, blockchain_1.createTxHex)(constants_1.txPallets.rent, constants_1.txActions.revokeContract, [nftId]);
});
exports.revokeContractTx = revokeContractTx;
/**
 * @name revokeContract
 * @summary               Revokes a running contract.
 * @param nftId           The NFT Id of the contract to revoke.
 * @param keyring         Account that will sign the transaction.
 * @param waitUntil       Execution trigger that can be set either to BlockInclusion or BlockFinalization.
 * @returns               ContractRevokedEvent Blockchain event.
 */
const revokeContract = (nftId, keyring, waitUntil) => __awaiter(void 0, void 0, void 0, function* () {
    const tx = yield (0, exports.revokeContractTx)(nftId);
    const { events } = yield (0, blockchain_1.submitTxBlocking)(tx, waitUntil, keyring);
    return events.findEventOrThrow(events_1.ContractRevokedEvent);
});
exports.revokeContract = revokeContract;
/**
 * @name rentTx
 * @summary                       Creates an unsigned unsubmitted Rent-Contract Transaction Hash for an NFT.
 * @param nftId                   The NFT Id with the contract to rent.
 * @param contractCreationBlockId The contract creation block id to check to ensure contract authenticity.
 * @returns                       Unsigned unsubmitted Rent-Contract Transaction Hash. The Hash is only valid for 5 minutes.
 */
const rentTx = (nftId, contractCreationBlockId) => __awaiter(void 0, void 0, void 0, function* () {
    return yield (0, blockchain_1.createTxHex)(constants_1.txPallets.rent, constants_1.txActions.rent, [nftId, contractCreationBlockId]);
});
exports.rentTx = rentTx;
/**
 * @name rent
 * @summary                       Rents an nft.
 * @param nftId                   The NFT Id of the contract to rent.
 * @param contractCreationBlockId The contract creation block id to check to ensure contract authenticity.
 * @param keyring                 Account that will sign the transaction.
 * @param waitUntil               Execution trigger that can be set either to BlockInclusion or BlockFinalization.
 * @returns                       ContractStartedEvent Blockchain event
 */
const rent = (nftId, contractCreationBlockId, keyring, waitUntil) => __awaiter(void 0, void 0, void 0, function* () {
    const tx = yield (0, exports.rentTx)(nftId, contractCreationBlockId);
    const { events } = yield (0, blockchain_1.submitTxBlocking)(tx, waitUntil, keyring);
    return events.findEventOrThrow(events_1.ContractStartedEvent);
});
exports.rent = rent;
/**
 * @name makeRentOfferTx
 * @summary                       Creates an unsigned unsubmitted Make-Rent-Offer Transaction Hash for an NFT.
 * @param nftId                   The NFT Id of the contract to make the offer.
 * @param contractCreationBlockId The contract creation block id to check to ensure contract authenticity.
 * @returns                       Unsigned unsubmitted Make-Rent-Offer Transaction Hash. The Hash is only valid for 5 minutes.
 */
const makeRentOfferTx = (nftId, contractCreationBlockId) => __awaiter(void 0, void 0, void 0, function* () {
    return yield (0, blockchain_1.createTxHex)(constants_1.txPallets.rent, constants_1.txActions.makeRentOffer, [nftId, contractCreationBlockId]);
});
exports.makeRentOfferTx = makeRentOfferTx;
/**
 * @name makeRentOffer
 * @summary                       Makes an offer for an available contract.
 * @param nftId                   The NFT Id of the contract to make the offer.
 * @param contractCreationBlockId The contract creation block id to check to ensure contract authenticity.
 * @param keyring                 Account that will sign the transaction.
 * @param waitUntil               Execution trigger that can be set either to BlockInclusion or BlockFinalization.
 * @returns                       ContractOfferCreated Blockchain event
 */
const makeRentOffer = (nftId, contractCreationBlockId, keyring, waitUntil) => __awaiter(void 0, void 0, void 0, function* () {
    const tx = yield (0, exports.makeRentOfferTx)(nftId, contractCreationBlockId);
    const { events } = yield (0, blockchain_1.submitTxBlocking)(tx, waitUntil, keyring);
    return events.findEventOrThrow(events_1.ContractOfferCreatedEvent);
});
exports.makeRentOffer = makeRentOffer;
/**
 * @name retractRentOfferTx
 * @summary               Creates an unsigned unsubmitted Retract-Rent-Offer Transaction Hash for an NFT.
 * @param nftId           The NFT Id of the contract to retract the offer.
 * @returns               Unsigned unsubmitted Retract-Rent-Offer Transaction Hash. The Hash is only valid for 5 minutes.
 */
const retractRentOfferTx = (nftId) => __awaiter(void 0, void 0, void 0, function* () {
    return yield (0, blockchain_1.createTxHex)(constants_1.txPallets.rent, constants_1.txActions.retractRentOffer, [nftId]);
});
exports.retractRentOfferTx = retractRentOfferTx;
/**
 * @name retractRentOffer
 * @summary               Retracts a rent offer for manual acceptance contract.
 * @param nftId           The NFT Id of the contract to retract the offer.
 * @param keyring         Account that will sign the transaction.
 * @param waitUntil       Execution trigger that can be set either to BlockInclusion or BlockFinalization.
 * @returns               ContractOfferRetractedEvent Blockchain event
 */
const retractRentOffer = (nftId, keyring, waitUntil) => __awaiter(void 0, void 0, void 0, function* () {
    const tx = yield (0, exports.retractRentOfferTx)(nftId);
    const { events } = yield (0, blockchain_1.submitTxBlocking)(tx, waitUntil, keyring);
    return events.findEventOrThrow(events_1.ContractOfferRetractedEvent);
});
exports.retractRentOffer = retractRentOffer;
/**
 * @name acceptRentOfferTx
 * @summary               Creates an unsigned unsubmitted Accept-Rent-Offer Transaction Hash for an NFT.
 * @param nftId           The NFT Id of the contract.
 * @param rentee          The adresse of the rentee who made the offer.
 * @returns               Unsigned unsubmitted Accept-Rent-Offer Transaction Hash. The Hash is only valid for 5 minutes.
 */
const acceptRentOfferTx = (nftId, rentee) => __awaiter(void 0, void 0, void 0, function* () {
    return yield (0, blockchain_1.createTxHex)(constants_1.txPallets.rent, constants_1.txActions.acceptRentOffer, [nftId, rentee]);
});
exports.acceptRentOfferTx = acceptRentOfferTx;
/**
 * @name acceptRentOffer
 * @summary               Accepts a rent offer for manual acceptance contract.
 * @param nftId           The NFT Id of the contract to retract the offer.
 * @param rentee          The adresse of the rentee who made the offer.
 * @param keyring         Account that will sign the transaction.
 * @param waitUntil       Execution trigger that can be set either to BlockInclusion or BlockFinalization.
 * @returns               ContractStartedEvent Blockchain event
 */
const acceptRentOffer = (nftId, rentee, keyring, waitUntil) => __awaiter(void 0, void 0, void 0, function* () {
    const tx = yield (0, exports.acceptRentOfferTx)(nftId, rentee);
    const { events } = yield (0, blockchain_1.submitTxBlocking)(tx, waitUntil, keyring);
    return events.findEventOrThrow(events_1.ContractStartedEvent);
});
exports.acceptRentOffer = acceptRentOffer;
/**
 * @name changeSubscriptionTermsTx
 * @summary               Creates an unsigned unsubmitted Change-Contract-Subscription-Terms Transaction Hash for an NFT.
 * @param nftId           The NFT Id of the contract to change the subscription terms.
 * @param rentFee         The fee to rent the contract: a token amount
 * @param period          The period of subscription before renewal
 * @param maxDuration     The contract duration (in block). Optional, default is null.
 * @param isChangeable    A boolean to make the contract updatable.
 * @returns               Unsigned unsubmitted Change-Contract-Subscription-Terms Transaction Hash. The Hash is only valid for 5 minutes.
 */
const changeSubscriptionTermsTx = (nftId, rentFee, period, maxDuration = null, isChangeable) => __awaiter(void 0, void 0, void 0, function* () {
    const formattedRentFee = typeof rentFee === "number" ? (0, blockchain_1.numberToBalance)(rentFee) : rentFee;
    return yield (0, blockchain_1.createTxHex)(constants_1.txPallets.rent, constants_1.txActions.changeSubscriptionTerms, [
        nftId,
        formattedRentFee,
        period,
        maxDuration,
        isChangeable,
    ]);
});
exports.changeSubscriptionTermsTx = changeSubscriptionTermsTx;
/**
 * @name changeSubscriptionTerms
 * @summary               Changes the subscription terms for subscription contracts.
 * @param nftId           The NFT Id of the contract to change the subscription terms.
 * @param rentFee         The fee to rent the contract: a token amount
 * @param period          The period of subscription before renewal
 * @param maxDuration     The contract duration (in block). Optional, default is null.
 * @param isChangeable    A boolean to make the contract updatable.
 * @param keyring         Account that will sign the transaction.
 * @param waitUntil       Execution trigger that can be set either to BlockInclusion or BlockFinalization.
 * @returns               ContractSubscriptionTermsChangedEvent Blockchain event
 */
const changeSubscriptionTerms = (nftId, rentFee, period, maxDuration = null, isChangeable, keyring, waitUntil) => __awaiter(void 0, void 0, void 0, function* () {
    const tx = yield (0, exports.changeSubscriptionTermsTx)(nftId, rentFee, period, maxDuration, isChangeable);
    const { events } = yield (0, blockchain_1.submitTxBlocking)(tx, waitUntil, keyring);
    return events.findEventOrThrow(events_1.ContractSubscriptionTermsChangedEvent);
});
exports.changeSubscriptionTerms = changeSubscriptionTerms;
/**
 * @name acceptSubscriptionTermsTx
 * @summary               Creates an unsigned unsubmitted Accept-Contract-Subscription-Terms Transaction Hash for an NFT.
 * @param nftId           The NFT Id of the contract to accept the new subscription terms.
 * @param rentFee         The fee to rent the contract: a token amount
 * @param period          The period of subscription before renewal
 * @param maxDuration     The contract duration (in block). Optional, default is null.
 * @param isChangeable    A boolean to make the contract updatable.
 * @returns               Unsigned unsubmitted Accept-Contract-Subscription-Terms Transaction Hash. The Hash is only valid for 5 minutes.
 */
const acceptSubscriptionTermsTx = (nftId, rentFee, period, maxDuration = null, isChangeable) => __awaiter(void 0, void 0, void 0, function* () {
    const formattedRentFee = typeof rentFee === "number" ? (0, blockchain_1.numberToBalance)(rentFee) : rentFee;
    return yield (0, blockchain_1.createTxHex)(constants_1.txPallets.rent, constants_1.txActions.acceptSubscriptionTerms, [
        nftId,
        formattedRentFee,
        period,
        maxDuration,
        isChangeable,
    ]);
});
exports.acceptSubscriptionTermsTx = acceptSubscriptionTermsTx;
/**
 * @name acceptSubscriptionTerms
 * @summary               Accepts the subscription terms for subscription contracts.
 * @param nftId           The NFT Id of the contract to change the subscription terms.
 * @param rentFee         The fee to rent the contract: a token amount
 * @param period          The period of subscription before renewal
 * @param maxDuration     The contract duration (in block). Optional, default is null.
 * @param isChangeable    A boolean to make the contract updatable.
 * @param keyring         Account that will sign the transaction.
 * @param waitUntil       Execution trigger that can be set either to BlockInclusion or BlockFinalization.
 * @returns               ContractSubscriptionTermsAcceptedEvent Blockchain event
 */
const acceptSubscriptionTerms = (nftId, rentFee, period, maxDuration = null, isChangeable, keyring, waitUntil) => __awaiter(void 0, void 0, void 0, function* () {
    const tx = yield (0, exports.acceptSubscriptionTermsTx)(nftId, rentFee, period, maxDuration, isChangeable);
    const { events } = yield (0, blockchain_1.submitTxBlocking)(tx, waitUntil, keyring);
    return events.findEventOrThrow(events_1.ContractSubscriptionTermsAcceptedEvent);
});
exports.acceptSubscriptionTerms = acceptSubscriptionTerms;
