import BN from "bn.js";
import { IKeyringPair } from "@polkadot/types/types";
import { AcceptanceType, CancellationFeeType, DurationType, RentFeeType } from "./types";
import { TransactionHashType } from "../blockchain";
import { WaitUntil } from "../constants";
import { ContractCanceledEvent, ContractCreatedEvent, ContractOfferCreatedEvent, ContractOfferRetractedEvent, ContractRevokedEvent, ContractStartedEvent, ContractSubscriptionTermsAcceptedEvent, ContractSubscriptionTermsChangedEvent } from "../events";
/**
 * @name createContractTx
 * @summary                         Creates an unsigned unsubmitted Create-Rent-Contract Transaction Hash for an NFT.
 * @param nftId                     The NFT Id of the contract.
 * @param duration                  The contract duration : Fixed(EndBlock (a block number)) or Subscription(Period (a block number), MaxDuration (a block number), IsChangeable (a boolean))
 * @param acceptanceType            The type of acceptance: automatic or manual (with or without whitelist)
 * @param renterCanRevoke           A boolean to allow renter to cancel the contract once started
 * @param rentFee                   The fee to rent the contract: a token amount or an NFT
 * @param renterCancellationFee     The fee to cancel the contract (due by the renter): No Fee (None), FixedTokens amount, FlexibleTokens (only for Fixed contract) amount or an NFT
 * @param renteeCancellationFee     The fee to cancel the contract (due by the rentee): No Fee (None), FixedTokens amount, FlexibleTokens (only for Fixed contract) amount or an NFT
 * @returns                         Unsigned unsubmitted Create-Rent-Contract Transaction Hash. The Hash is only valid for 5 minutes.
 */
export declare const createContractTx: (nftId: number, duration: DurationType, acceptanceType: AcceptanceType, renterCanRevoke: boolean, rentFee: RentFeeType, renterCancellationFee: CancellationFeeType, renteeCancellationFee: CancellationFeeType) => Promise<TransactionHashType>;
/**
 * @name createContract
 * @summary                         Creates a rental contract on the chain for an NFT.
 * @param nftId                     The NFT Id of the contract.
 * @param duration                  The contract duration : Fixed(EndBlock (a block number)) or Subscription(Period (a block number), MaxDuration (a block number), IsChangeable (a boolean))
 * @param acceptanceType            The type of acceptance: automatic or manual (with or without whitelist)
 * @param renterCanRevoke           A boolean to allow renter to cancel the contract once started
 * @param rentFee                   The fee to rent the contract: a token amount or an NFT
 * @param renterCancellationFee     The fee to cancel the contract (due by the renter): No Fee (None), FixedTokens amount, FlexibleTokens (only for Fixed contract) amount or an NFT
 * @param renteeCancellationFee     The fee to cancel the contract (due by the rentee): No Fee (None), FixedTokens amount, FlexibleTokens (only for Fixed contract) amount or an NFT
 * @param keyring                   Account that will sign the transaction.
 * @param waitUntil                 Execution trigger that can be set either to BlockInclusion or BlockFinalization.
 * @returns                         ContractCreatedEvent Blockchain event.
 */
export declare const createContract: (nftId: number, duration: DurationType, acceptanceType: AcceptanceType, renterCanRevoke: boolean, rentFee: RentFeeType, renterCancellationFee: CancellationFeeType, renteeCancellationFee: CancellationFeeType, keyring: IKeyringPair, waitUntil: WaitUntil) => Promise<ContractCreatedEvent>;
/**
 * @name cancelContractTx
 * @summary               Creates an unsigned unsubmitted Cancel-Rent-Contract Transaction Hash for an NFT.
 * @param nftId           The NFT Id of the contract to cancel.
 * @returns               Unsigned unsubmitted Cancel-Rent-Contract Transaction Hash. The Hash is only valid for 5 minutes.
 */
export declare const cancelContractTx: (nftId: number) => Promise<TransactionHashType>;
/**
 * @name cancelContract
 * @summary               Cancels a contract that is not running.
 * @param nftId           The NFT Id of the contract to cancel.
 * @param keyring         Account that will sign the transaction.
 * @param waitUntil       Execution trigger that can be set either to BlockInclusion or BlockFinalization.
 * @returns               ContractCanceledEvent Blockchain event.
 */
export declare const cancelContract: (nftId: number, keyring: IKeyringPair, waitUntil: WaitUntil) => Promise<ContractCanceledEvent>;
/**
 * @name revokeContractTx
 * @summary               Creates an unsigned unsubmitted Revoke-Rent-Contract Transaction Hash for an NFT.
 * @param nftId           The NFT Id of the contract to revoke.
 * @returns               Unsigned unsubmitted Revoke-Rent-Contract Transaction Hash. The Hash is only valid for 5 minutes.
 */
export declare const revokeContractTx: (nftId: number) => Promise<TransactionHashType>;
/**
 * @name revokeContract
 * @summary               Revokes a running contract.
 * @param nftId           The NFT Id of the contract to revoke.
 * @param keyring         Account that will sign the transaction.
 * @param waitUntil       Execution trigger that can be set either to BlockInclusion or BlockFinalization.
 * @returns               ContractRevokedEvent Blockchain event.
 */
export declare const revokeContract: (nftId: number, keyring: IKeyringPair, waitUntil: WaitUntil) => Promise<ContractRevokedEvent>;
/**
 * @name rentTx
 * @summary                       Creates an unsigned unsubmitted Rent-Contract Transaction Hash for an NFT.
 * @param nftId                   The NFT Id with the contract to rent.
 * @param contractCreationBlockId The contract creation block id to check to ensure contract authenticity.
 * @returns                       Unsigned unsubmitted Rent-Contract Transaction Hash. The Hash is only valid for 5 minutes.
 */
export declare const rentTx: (nftId: number, contractCreationBlockId: number) => Promise<TransactionHashType>;
/**
 * @name rent
 * @summary                       Rents an nft.
 * @param nftId                   The NFT Id of the contract to rent.
 * @param contractCreationBlockId The contract creation block id to check to ensure contract authenticity.
 * @param keyring                 Account that will sign the transaction.
 * @param waitUntil               Execution trigger that can be set either to BlockInclusion or BlockFinalization.
 * @returns                       ContractStartedEvent Blockchain event
 */
export declare const rent: (nftId: number, contractCreationBlockId: number, keyring: IKeyringPair, waitUntil: WaitUntil) => Promise<ContractStartedEvent>;
/**
 * @name makeRentOfferTx
 * @summary                       Creates an unsigned unsubmitted Make-Rent-Offer Transaction Hash for an NFT.
 * @param nftId                   The NFT Id of the contract to make the offer.
 * @param contractCreationBlockId The contract creation block id to check to ensure contract authenticity.
 * @returns                       Unsigned unsubmitted Make-Rent-Offer Transaction Hash. The Hash is only valid for 5 minutes.
 */
export declare const makeRentOfferTx: (nftId: number, contractCreationBlockId: number) => Promise<TransactionHashType>;
/**
 * @name makeRentOffer
 * @summary                       Makes an offer for an available contract.
 * @param nftId                   The NFT Id of the contract to make the offer.
 * @param contractCreationBlockId The contract creation block id to check to ensure contract authenticity.
 * @param keyring                 Account that will sign the transaction.
 * @param waitUntil               Execution trigger that can be set either to BlockInclusion or BlockFinalization.
 * @returns                       ContractOfferCreated Blockchain event
 */
export declare const makeRentOffer: (nftId: number, contractCreationBlockId: number, keyring: IKeyringPair, waitUntil: WaitUntil) => Promise<ContractOfferCreatedEvent>;
/**
 * @name retractRentOfferTx
 * @summary               Creates an unsigned unsubmitted Retract-Rent-Offer Transaction Hash for an NFT.
 * @param nftId           The NFT Id of the contract to retract the offer.
 * @returns               Unsigned unsubmitted Retract-Rent-Offer Transaction Hash. The Hash is only valid for 5 minutes.
 */
export declare const retractRentOfferTx: (nftId: number) => Promise<TransactionHashType>;
/**
 * @name retractRentOffer
 * @summary               Retracts a rent offer for manual acceptance contract.
 * @param nftId           The NFT Id of the contract to retract the offer.
 * @param keyring         Account that will sign the transaction.
 * @param waitUntil       Execution trigger that can be set either to BlockInclusion or BlockFinalization.
 * @returns               ContractOfferRetractedEvent Blockchain event
 */
export declare const retractRentOffer: (nftId: number, keyring: IKeyringPair, waitUntil: WaitUntil) => Promise<ContractOfferRetractedEvent>;
/**
 * @name acceptRentOfferTx
 * @summary               Creates an unsigned unsubmitted Accept-Rent-Offer Transaction Hash for an NFT.
 * @param nftId           The NFT Id of the contract.
 * @param rentee          The adresse of the rentee who made the offer.
 * @returns               Unsigned unsubmitted Accept-Rent-Offer Transaction Hash. The Hash is only valid for 5 minutes.
 */
export declare const acceptRentOfferTx: (nftId: number, rentee: string) => Promise<TransactionHashType>;
/**
 * @name acceptRentOffer
 * @summary               Accepts a rent offer for manual acceptance contract.
 * @param nftId           The NFT Id of the contract to retract the offer.
 * @param rentee          The adresse of the rentee who made the offer.
 * @param keyring         Account that will sign the transaction.
 * @param waitUntil       Execution trigger that can be set either to BlockInclusion or BlockFinalization.
 * @returns               ContractStartedEvent Blockchain event
 */
export declare const acceptRentOffer: (nftId: number, rentee: string, keyring: IKeyringPair, waitUntil: WaitUntil) => Promise<ContractStartedEvent>;
/**
 * @name changeSubscriptionTermsTx
 * @summary               Creates an unsigned unsubmitted Change-Contract-Subscription-Terms Transaction Hash for an NFT.
 * @param nftId           The NFT Id of the contract to change the subscription terms.
 * @param rentFee         The fee to rent the contract: a token amount
 * @param period          The period of subscription before renewal
 * @param maxDuration     The contract duration (in block). Optional, default is null.
 * @param isChangeable    A boolean to make the contract updatable.
 * @returns               Unsigned unsubmitted Change-Contract-Subscription-Terms Transaction Hash. The Hash is only valid for 5 minutes.
 */
export declare const changeSubscriptionTermsTx: (nftId: number, rentFee: number | BN, period: number, maxDuration: number | null | undefined, isChangeable: boolean) => Promise<TransactionHashType>;
/**
 * @name changeSubscriptionTerms
 * @summary               Changes the subscription terms for subscription contracts.
 * @param nftId           The NFT Id of the contract to change the subscription terms.
 * @param rentFee         The fee to rent the contract: a token amount
 * @param period          The period of subscription before renewal
 * @param maxDuration     The contract duration (in block). Optional, default is null.
 * @param isChangeable    A boolean to make the contract updatable.
 * @param keyring         Account that will sign the transaction.
 * @param waitUntil       Execution trigger that can be set either to BlockInclusion or BlockFinalization.
 * @returns               ContractSubscriptionTermsChangedEvent Blockchain event
 */
export declare const changeSubscriptionTerms: (nftId: number, rentFee: number | BN, period: number, maxDuration: number | null | undefined, isChangeable: boolean, keyring: IKeyringPair, waitUntil: WaitUntil) => Promise<ContractSubscriptionTermsChangedEvent>;
/**
 * @name acceptSubscriptionTermsTx
 * @summary               Creates an unsigned unsubmitted Accept-Contract-Subscription-Terms Transaction Hash for an NFT.
 * @param nftId           The NFT Id of the contract to accept the new subscription terms.
 * @param rentFee         The fee to rent the contract: a token amount
 * @param period          The period of subscription before renewal
 * @param maxDuration     The contract duration (in block). Optional, default is null.
 * @param isChangeable    A boolean to make the contract updatable.
 * @returns               Unsigned unsubmitted Accept-Contract-Subscription-Terms Transaction Hash. The Hash is only valid for 5 minutes.
 */
export declare const acceptSubscriptionTermsTx: (nftId: number, rentFee: number | BN, period: number, maxDuration: number | null | undefined, isChangeable: boolean) => Promise<TransactionHashType>;
/**
 * @name acceptSubscriptionTerms
 * @summary               Accepts the subscription terms for subscription contracts.
 * @param nftId           The NFT Id of the contract to change the subscription terms.
 * @param rentFee         The fee to rent the contract: a token amount
 * @param period          The period of subscription before renewal
 * @param maxDuration     The contract duration (in block). Optional, default is null.
 * @param isChangeable    A boolean to make the contract updatable.
 * @param keyring         Account that will sign the transaction.
 * @param waitUntil       Execution trigger that can be set either to BlockInclusion or BlockFinalization.
 * @returns               ContractSubscriptionTermsAcceptedEvent Blockchain event
 */
export declare const acceptSubscriptionTerms: (nftId: number, rentFee: number | BN, period: number, maxDuration: number | null | undefined, isChangeable: boolean, keyring: IKeyringPair, waitUntil: WaitUntil) => Promise<ContractSubscriptionTermsAcceptedEvent>;
