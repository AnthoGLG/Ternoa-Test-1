import { AcceptanceType, CancellationFeeType, DurationType, RentFeeType } from "./types";
/**
 * @name formatDuration
 * @summary Returns an object representing a duration in either fixed or subscription format.
 *
 * @param type - The type of duration. Can be either 'fixed' or 'subscription'.
 * @param duration - The length of the contract duration in blocks.
 * @param maxDuration - (Optional) The maximum length of the contract subscription duration in blocks. Only applicable for subscriptions.
 * @param isChangeable - (Optional) A boolean indicating if the duration can be changed. Only applicable for subscriptions.
 *
 * @returns An object representing the duration of a contract.
 */
export declare const formatDuration: (type: "fixed" | "subscription", duration: number, maxDuration?: number, isChangeable?: boolean) => DurationType;
/**
 * @name formatAcceptanceType
 * @summary Returns an object representing an acceptance type in either auto or manual format.
 *
 * @param type - The type of acceptance. Can be either 'auto' or 'manual'.
 * @param list - (Optional) A list of addresses. Only applicable for auto acceptance.
 *
 * @returns An object representing the acceptance type of a contract.
 */
export declare const formatAcceptanceType: (type: "auto" | "manual", list?: string[] | null) => AcceptanceType;
/**
 * @name formatRentFee
 * @summary Returns an object representing a rent fee in either tokens or NFT format.
 *
 * @param type - The type of rent fee. Can be either 'tokens' or 'nft'.
 * @param value - The value of the rent fee. If type is 'tokens' value refers to a balance amount. If type is 'nft' value refers to the NFT id.
 *
 * @returns An object representing the rent fee of a contract.
 */
export declare const formatRentFee: (type: "tokens" | "nft", value: number) => RentFeeType;
/**
 * @name formatCancellationFee
 * @summary Returns an object representing a cancellation fee in either fixed, flexible or NFT format.
 *
  type: "fixed" | "flexible" | "nft" | "none",
 * @param type - The type of cancellation fee. Can be either 'fixed', 'flexible', 'nft' or 'none'.
 * @param value - The value of the rent fee. If type is 'fixed' or 'flexible' value refers to a balance amount. If type is 'nft' value refers to the NFT id.
 *
 * @returns An object representing the rent fee of a contract.
 */
export declare const formatCancellationFee: (type: "fixed" | "flexible" | "nft" | "none", value?: number) => CancellationFeeType;
/**
 * @name validateTransformContractFee
 * @summary         Validates the type fee and format it accordingly. Numbers are formatted into BN.
 * @param fee       The fee to format : It can only be a RentFeeType or CancellationFeeType.
 * @returns         The formatted fee.
 */
export declare const validateTransformContractFee: <T extends RentFeeType | CancellationFeeType>(fee: T) => RentFeeType | CancellationFeeType;
