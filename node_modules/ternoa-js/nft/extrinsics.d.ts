import { IKeyringPair } from "@polkadot/types/types";
import { TransactionHashType } from "../blockchain";
import { WaitUntil } from "../constants";
import { CapsuleKeyUpdateNotifiedEvent, CapsuleOffchainDataSetEvent, CollectionBurnedEvent, CollectionClosedEvent, CollectionCreatedEvent, CollectionLimitedEvent, CollectionOffchainDataSetEvent, NFTAddedToCollectionEvent, NFTBurnedEvent, NFTConvertedToCapsuleEvent, NFTCreatedEvent, NFTDelegatedEvent, NFTRoyaltySetEvent, NFTTransferredEvent, SecretAddedToNFTEvent } from "../events";
import { CapsuleNFTData, NftData, SecretNftData } from "./types";
/**
 * @name createNftTx
 * @summary             Creates an unsigned unsubmitted Create-NFT Transaction Hash.
 * @param offchainData  Off-chain related NFT metadata. Can be an IPFS Hash, an URL or plain text.
 * @param royalty       Percentage of all second sales that the creator will receive. It's a decimal number in range [0, 100]. Default is 0.
 * @param collectionId  The collection that this NFT will belong. Optional Parameter.
 * @param isSoulbound   If true makes the NFT untransferable. Default is false.
 * @returns             Unsigned unsubmitted Create-NFT Transaction Hash. The Hash is only valid for 5 minutes.
 */
export declare const createNftTx: (offchainData: string, royalty?: number, collectionId?: number | undefined, isSoulbound?: boolean) => Promise<TransactionHashType>;
/**
 * @name createNft
 * @summary             Creates an NFT on the chain.
 * @param offchainData  Off-chain related NFT metadata. Can be an IPFS Hash, an URL or plain text.
 * @param royalty       Percentage of all second sales that the creator will receive. It's a decimal number in range [0, 100]. Default is 0.
 * @param collectionId  The collection that this NFT will belong. Optional Parameter.
 * @param isSoulbound   If true makes the NFT untransferable. Default is false.
 * @param keyring       Account that will sign the transaction.
 * @param waitUntil     Execution trigger that can be set either to BlockInclusion or BlockFinalization.
 * @returns             NFTCreatedEvent Blockchain event.
 */
export declare const createNft: (offchainData: string, royalty: number | undefined, collectionId: number | undefined, isSoulbound: boolean | undefined, keyring: IKeyringPair, waitUntil: WaitUntil) => Promise<NFTCreatedEvent>;
/**
 * @name createSecretNftTx
 * @summary                   Creates an unsigned unsubmitted Create-Secret-NFT Transaction Hash.
 * @param offchainData        Off-chain related NFT preview metadata. Can be an IPFS hash, a URL or plain text.
 * @param secretOffchainData  Off-chain related NFT secret metadata. Can be an IPFS hash, a URL or plain text.
 * @param royalty             Percentage of all second sales that the creator will receive. It's a decimal number in range [0, 100]. Default is 0.
 * @param collectionId        The collection to which the NFT belongs. Optional Parameter.
 * @param isSoulbound         If true, makes the NFT intransferable. Default is false.
 * @returns                   Unsigned unsubmitted Create-Secret-NFT Transaction Hash. The Hash is only valid for 5 minutes.
 */
export declare const createSecretNftTx: (offchainData: string, secretOffchainData: string, royalty?: number, collectionId?: number | undefined, isSoulbound?: boolean) => Promise<TransactionHashType>;
/**
 * @name createSecretNft
 * @summary                   Creates a Secret NFT on chain.
 * @param offchainData        Off-chain related NFT preview metadata. Can be an IPFS hash, a URL or plain text.
 * @param secretOffchainData  Off-chain related NFT secret metadata. Can be an IPFS hash, a URL or plain text.
 * @param royalty             Percentage of all second sales that the creator will receive. It's a decimal number in range [0, 100]. Default is 0.
 * @param collectionId        The collection to which the NFT belongs. Optional Parameter.
 * @param isSoulbound         If true, makes the NFT intransferable. Default is false.
 * @param keyring             Account that will sign the transaction.
 * @param waitUntil           Execution trigger that can be set either to BlockInclusion or BlockFinalization.
 * @returns                   Secret NFT data combining the data from NFTCreatedEvent and SecretAddedToNFTEvent.
 */
export declare const createSecretNft: (offchainData: string, secretOffchainData: string, royalty: number | undefined, collectionId: number | undefined, isSoulbound: boolean | undefined, keyring: IKeyringPair, waitUntil: WaitUntil) => Promise<SecretNftData>;
/**
 * @name addSecretToNftTx
 * @summary                   Creates an unsigned unsubmitted Add-Secret-NFT Transaction Hash.
 * @param id                  The ID of the NFT.
 * @param secretOffchainData  Off-chain related NFT secret metadata. Can be an IPFS hash, a URL or plain text.
 * @returns                   Unsigned unsubmitted Create-Secret-NFT Transaction Hash. The Hash is only valid for 5 minutes.
 */
export declare const addSecretToNftTx: (id: number, secretOffchainData: string) => Promise<TransactionHashType>;
/**
 * @name addSecretToNft
 * @summary                   Adds a Secret to an NFT on chain.
 * @param id                  The ID of the NFT.
 * @param secretOffchainData  Off-chain related NFT secret metadata. Can be an IPFS hash, a URL or plain text.
 * @param keyring             Account that will sign the transaction.
 * @param waitUntil           Execution trigger that can be set either to BlockInclusion or BlockFinalization.
 * @returns                   SecretAddedToNFTEvent Blockchain event.
 */
export declare const addSecretToNft: (id: number, secretOffchainData: string, keyring: IKeyringPair, waitUntil: WaitUntil) => Promise<SecretAddedToNFTEvent>;
/**
 * @name burnNftTx
 * @summary   Creates an unsigned unsubmitted Burn-NFT Transaction Hash.
 * @param id  The ID of the NFT.
 * @returns   Unsigned unsubmitted Burn-NFT Transaction Hash. The Hash is only valid for 5 minutes.
 */
export declare const burnNftTx: (id: number) => Promise<TransactionHashType>;
/**
 * @name burnNft
 * @summary           Burns an NFT from the chain.
 * @param id          The ID of the NFT.
 * @param keyring     Account that will sign the transaction.
 * @param waitUntil   Execution trigger that can be set either to BlockInclusion or BlockFinalization.
 * @returns           NFTBurnedEvent Blockchain event.
 */
export declare const burnNft: (id: number, keyring: IKeyringPair, waitUntil: WaitUntil) => Promise<NFTBurnedEvent>;
/**
 * @name delegateNftTx
 * @summary           Creates an unsigned unsubmitted Delegate-NFT Transaction Hash.
 * @param id          The ID of the NFT.
 * @param recipient   Destination account. If set to undefined this functions acts as a way to undelegate a delegated NFT.
 * @returns           Unsigned unsubmitted Delegate-NFT Transaction Hash. The Hash is only valid for 5 minutes.
 */
export declare const delegateNftTx: (id: number, recipient?: string | undefined) => Promise<TransactionHashType>;
/**
 * @name delegateNft
 * @summary           Delegates an NFT to someone.
 * @param id          The ID of the NFT.
 * @param recipient   Destination account. If set to undefined this functions acts as a way to undelegate a delegated NFT.
 * @param keyring     Account that will sign the transaction.
 * @param waitUntil   Execution trigger that can be set either to BlockInclusion or BlockFinalization.
 * @returns           NFTDelegatedEvent Blockchain event.
 */
export declare const delegateNft: (id: number, recipient: string | undefined, keyring: IKeyringPair, waitUntil: WaitUntil) => Promise<NFTDelegatedEvent>;
/**
 * @name setRoyaltyTx
 * @summary       Creates an unsigned unsubmitted Set-Royalty Transaction Hash.
 * @param id      The ID of the NFT.
 * @param amount  The new royalty value.
 * @returns       Unsigned unsubmitted Set-Royalty-NFT Transaction Hash. The Hash is only valid for 5 minutes.
 */
export declare const setRoyaltyTx: (id: number, amount: number) => Promise<TransactionHashType>;
/**
 * @name setRoyalty
 * @summary           Sets the royalty of an NFT.
 * @param id          The ID of the NFT.
 * @param amount      The new royalty value.
 * @param keyring     Account that will sign the transaction.
 * @param waitUntil   Execution trigger that can be set either to BlockInclusion or BlockFinalization.
 * @returns           NFTRoyaltySetEvent Blockchain event.
 */
export declare const setRoyalty: (id: number, amount: number, keyring: IKeyringPair, waitUntil: WaitUntil) => Promise<NFTRoyaltySetEvent>;
/**
 * @name transferNftTx
 * @summary           Creates an unsigned unsubmitted Transfer-NFT Transaction Hash.
 * @param id          The ID of the NFT.
 * @param recipient   Destination account.
 * @returns           Unsigned unsubmitted Transfer-NFT Transaction Hash. The Hash is only valid for 5 minutes
 */
export declare const transferNftTx: (id: number, recipient: string) => Promise<TransactionHashType>;
/**
 * @name transferNft
 * @summary           Sends an NFT to someone.
 * @param id          The ID of the NFT.
 * @param recipient   Destination account.
 * @param keyring     Account that will sign the transaction.
 * @param waitUntil   Execution trigger that can be set either to BlockInclusion or BlockFinalization.
 * @returns           NFTTransferredEvent Blockchain event.
 */
export declare const transferNft: (id: number, recipient: string, keyring: IKeyringPair, waitUntil: WaitUntil) => Promise<NFTTransferredEvent>;
/**
 * @name addNftToCollectionTx
 * @summary               Creates an unsigned unsubmitted Add-NFT-To-Collection Transaction Hash.
 * @param nftId           The ID of the NFT.
 * @param collectionId    The ID of the Collection.
 * @returns               Unsigned unsubmitted Add-NFT-To-Collection Transaction Hash. The Hash is only valid for 5 minutes.
 */
export declare const addNftToCollectionTx: (nftId: number, collectionId: number) => Promise<TransactionHashType>;
/**
 * @name addNftToCollection
 * @summary               Adds an NFT to an existing collection.
 * @param nftId           The ID of the NFT.
 * @param collectionId    The ID of the Collection.
 * @param keyring         Account that will sign the transaction.
 * @param waitUntil       Execution trigger that can be set either to BlockInclusion or BlockFinalization.
 * @returns               NFTAddedToCollectionEvent Blockchain event.
 */
export declare const addNftToCollection: (nftId: number, collectionId: number, keyring: IKeyringPair, waitUntil: WaitUntil) => Promise<NFTAddedToCollectionEvent>;
/**
 * @name convertNftToCapsuleTx
 * @summary    		              Creates an unsigned unsubmitted Convert-To-Capsule Transaction Hash for a Capsule NFT.
 * @param nftId		              The NFT Id to convert into a capsule.
 * @param capsuleOffchainData 	The offchain capsule data (a string)
 * @returns  		                Unsigned unsubmitted Convert-To-Capsule Transaction Hash. The Hash is only valid for 5 minutes.
 */
export declare const convertNftToCapsuleTx: (nftId: number, capsuleOffchainData: string) => Promise<TransactionHashType>;
/**
 * @name convertNftToCapsule
 * @summary    		              Convert an existing basic NFT into a Capsule NFT.
 * @param nftId		              The NFT Id to convert in a capsule.
 * @param capsuleOffchainData 	The offchain capsule data (a string)
 * @param keyring               Account that will sign the transaction.
 * @param waitUntil             Execution trigger that can be set either to BlockInclusion or BlockFinalization.
 * @returns  		                NFTConvertedToCapsuleEvent Blockchain event.
 */
export declare const convertNftToCapsule: (nftId: number, capsuleOffchainData: string, keyring: IKeyringPair, waitUntil: WaitUntil) => Promise<NFTConvertedToCapsuleEvent>;
/**
 * @name createCapsuleTx
 * @summary    		             Creates an unsigned unsubmitted Create-Capsule Transaction Hash for a Capsule NFT.
 * @param offchainData         Off-chain data related to the NFT metadata. Can be an IPFS Hash, an URL or plain text.
 * @param capsuleOffchainData  Off-chain data related to the Capsule metadata. Can be an IPFS hash, a URL or plain text.
 * @param royalty              Percentage of all second sales that the creator will receive. It's a decimal number in range [0, 100]. Default is 0.
 * @param collectionId         The collection to which the NFT belongs. Optional Parameter.
 * @param isSoulbound          If true, makes the Capsule intransferable. Default is false.
 * @returns  		               Unsigned unsubmitted Create-Capsule Transaction Hash. The Hash is only valid for 5 minutes.
 */
export declare const createCapsuleTx: (offchainData: string, capsuleOffchainData: string, royalty?: number, collectionId?: number | undefined, isSoulbound?: boolean) => Promise<TransactionHashType>;
/**
 * @name createCapsule
 * @summary    		              Convert an existing basic NFT into a Capsule NFT.
 * @param offchainData          Off-chain data related to the NFT metadata. Can be an IPFS Hash, an URL or plain text.
 * @param capsuleOffchainData   Off-chain data related to the Capsule metadata. Can be an IPFS hash, a URL or plain text.
 * @param royalty               Percentage of all second sales that the creator will receive. It's a decimal number in range [0, 100]. Default is 0.
 * @param collectionId          The collection to which the NFT belongs. Optional Parameter.
 * @param isSoulbound           If true, makes the Capsule intransferable. Default is false.
 * @param keyring               Account that will sign the transaction.
 * @param waitUntil             Execution trigger that can be set either to BlockInclusion or BlockFinalization.
 * @returns  		                Capsule NFT data combining the data from NFTCreatedEvent and NFTConvertedToCapsuleEvent.
 */
export declare const createCapsule: (offchainData: string, capsuleOffchainData: string, royalty: number | undefined, collectionId: number | undefined, isSoulbound: boolean | undefined, keyring: IKeyringPair, waitUntil: WaitUntil) => Promise<CapsuleNFTData<NftData>>;
/**
 * @name setCapsuleOffchaindataTx
 * @summary    		              Creates an unsigned unsubmitted Set-Capsule-Offchain-Data Transaction Hash for a Capsule NFT.
 * @param nftId		              The NFT Id to set the capsule's offchain data. Capsules are mutable
 * @param capsuleOffchainData 	The offchain capsule data (a string)
 * @returns  		                Unsigned unsubmitted Set-Capsule-Offchain-Data Transaction Hash. The Hash is only valid for 5 minutes.
 */
export declare const setCapsuleOffchaindataTx: (nftId: number, capsuleOffchainData: string) => Promise<TransactionHashType>;
/**
 * @name setCapsuleOffchaindata
 * @summary    		               Sets the offchain data of a Capsule NFT.
 * @param nftId		               The NFT Id to set the capsule's offchain data. Capsules are mutable
 * @param capsuleOffchainData 	 The offchain capsule data (a string)
 * @param keyring                Account that will sign the transaction.
 * @param waitUntil              Execution trigger that can be set either to BlockInclusion or BlockFinalization.
 * @returns  		                 CapsuleOffchainDataSetEvent Blockchain event.
 */
export declare const setCapsuleOffchaindata: (nftId: number, capsuleOffchainData: string, keyring: IKeyringPair, waitUntil: WaitUntil) => Promise<CapsuleOffchainDataSetEvent>;
/**
 * @name notifyEnclaveKeyUpdateTx
 * @summary    		   Creates an unsigned unsubmitted Notify-Enclave-Key-Update Transaction Hash for a Capsule NFT.
 * @param nftId		   The capsule NFT Id to signify that new keys were requested by the capsule owner.
 * @returns  		     Unsigned unsubmitted Notify-Enclave-Key-Update Transaction Hash. The Hash is only valid for 5 minutes.
 */
export declare const notifyEnclaveKeyUpdateTx: (nftId: number) => Promise<TransactionHashType>;
/**
 * @name notifyEnclaveKeyUpdate
 * @summary		       Notifies the enclave that capsule owner requests new keys.
 * @param nftId		   The capsule NFT Id to signify that new keys were requested by the capsule owner.
 * @param keyring		 Account that will sign the transaction.
 * @param waitUntil  Execution trigger that can be set either to BlockInclusion or BlockFinalization.
 * @returns  		     CapsuleKeyUpdateNotifiedEvent Blockchain event.
 */
export declare const notifyEnclaveKeyUpdate: (nftId: number, keyring: IKeyringPair, waitUntil: WaitUntil) => Promise<CapsuleKeyUpdateNotifiedEvent>;
/**
 * @name createCollectionTx
 * @summary               Creates an unsigned unsubmitted Create-Collection Transaction Hash.
 * @param offchainData    Off-chain related Collection metadata. Can be an IPFS Hash, an URL or plain text.
 * @param limit           The maximum amount that NFTs that the collection can hold. This is optional
 * @returns               Unsigned unsubmitted Create-Collection Transaction Hash. The Hash is only valid for 5 minutes.
 */
export declare const createCollectionTx: (offchainData: string, limit?: number | undefined) => Promise<TransactionHashType>;
/**
 * @name createCollection
 * @summary               Creates a collection.
 * @param offchainData    Off-chain related Collection metadata. Can be an IPFS Hash, an URL or plain text.
 * @param limit           Amount of NFTs that can be associated with this collection. This is optional
 * @param keyring         Account that will sign the transaction.
 * @param waitUntil       Execution trigger that can be set either to BlockInclusion or BlockFinalization.
 * @returns               CollectionCreatedEvent Blockchain event.
 */
export declare const createCollection: (offchainData: string, limit: number | undefined, keyring: IKeyringPair, waitUntil: WaitUntil) => Promise<CollectionCreatedEvent>;
/**
 * @name limitCollectionTx
 * @summary       Creates an unsigned unsubmitted Limit-Collection Transaction Hash.
 * @param id      The ID of the Collection.
 * @param limit   Amount of NFTs that can be associated with this collection.
 * @returns       Unsigned unsubmitted Limit-Collection Transaction Hash. The Hash is only valid for 5 minutes.
 */
export declare const limitCollectionTx: (id: number, limit: number) => Promise<TransactionHashType>;
/**
 * @name limitCollection
 * @summary           Limits how many NFTs can be associated with this collection.
 * @param id          The ID of the Collection.
 * @param limit       Amount of NFTs that can be associated with this collection.
 * @param keyring     Account that will sign the transaction.
 * @param waitUntil   Execution trigger that can be set either to BlockInclusion or BlockFinalization.
 * @returns           CollectionLimitedEvent Blockchain event.
 */
export declare const limitCollection: (id: number, limit: number, keyring: IKeyringPair, waitUntil: WaitUntil) => Promise<CollectionLimitedEvent>;
/**
 * @name closeCollectionTx
 * @summary   Creates an unsigned unsubmitted Close-Collection Transaction Hash.
 * @param id  The ID of the Collection.
 * @returns   Unsigned unsubmitted Close-Collection Transaction Hash. The Hash is only valid for 5 minutes.
 */
export declare const closeCollectionTx: (id: number) => Promise<TransactionHashType>;
/**
 * @name closeCollection
 * @summary           Closes the collection so that no new NFTs can be added.
 * @param id          The ID of the Collection.
 * @param keyring     Account that will sign the transaction.
 * @param waitUntil   Execution trigger that can be set either to BlockInclusion or BlockFinalization.
 * @returns           CollectionClosedEvent Blockchain event.
 */
export declare const closeCollection: (id: number, keyring: IKeyringPair, waitUntil: WaitUntil) => Promise<CollectionClosedEvent>;
/**
 * @name burnCollectionTx
 * @summary   Creates an unsigned unsubmitted Burn-Collection Transaction Hash.
 * @param id  The ID of the Collection.
 * @returns   Unsigned unsubmitted Burn-Collection Transaction Hash. The Hash is only valid for 5 minutes.
 */
export declare const burnCollectionTx: (id: number) => Promise<TransactionHashType>;
/**
 * @name burnCollection
 * @summary           Burns an existing collection. The collections needs to be empty before it can be burned.
 * @param id          The ID of the Collection.
 * @param keyring     Account that will sign the transaction.
 * @param waitUntil   Execution trigger that can be set either to BlockInclusion or BlockFinalization.
 * @returns           CollectionBurnedEvent Blockchain event.
 */
export declare const burnCollection: (id: number, keyring: IKeyringPair, waitUntil: WaitUntil) => Promise<CollectionBurnedEvent>;
/**
 * @name setCollectionOffchaindataTx
 * @summary    		              Creates an unsigned unsubmitted Set-Collection-Offchain-Data Transaction Hash for a Collection.
 * @param id		                The ID of the Collection.
 * @param offchainData 	        The offchain collection data (a string)
 * @returns  		                Unsigned unsubmitted Set-Collection-Offchain-Data Transaction Hash. The Hash is only valid for 5 minutes.
 */
export declare const setCollectionOffchaindataTx: (id: number, offchainData: string) => Promise<TransactionHashType>;
/**
 * @name setCollectionOffchaindata
 * @summary    		               Sets the offchain data of a Collection.
 * @param id		                 The ID of the Collection.
 * @param offchainData 	         The offchain collection data (a string)
 * @param keyring                Account that will sign the transaction.
 * @param waitUntil              Execution trigger that can be set either to BlockInclusion or BlockFinalization.
 * @returns  		                 CollectionOffchainDataSetEvent Blockchain event.
 */
export declare const setCollectionOffchaindata: (id: number, offchainData: string, keyring: IKeyringPair, waitUntil: WaitUntil) => Promise<CollectionOffchainDataSetEvent>;
