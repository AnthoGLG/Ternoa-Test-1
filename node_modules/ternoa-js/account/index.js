"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getKeyringFromSeed = exports.generateSeed = void 0;
const util_crypto_1 = require("@polkadot/util-crypto");
const keyring_1 = require("@polkadot/keyring");
/**
 * @name generateSeed
 * @summary Generate a new seed
 * @returns The new seed
 */
exports.generateSeed = util_crypto_1.mnemonicGenerate;
/**
 * @name getKeyringFromSeed
 * @summary               Create a keyring from a seed
 * @param seed            Mnemonic
 * @param hardPath        Hard path derivation
 * @param softPath        Soft path derivation
 * @param passwordPath    Password path derivation
 * @returns               A keyring pair
 */
const getKeyringFromSeed = (seed, hardPath, softPath, passwordPath) => __awaiter(void 0, void 0, void 0, function* () {
    yield (0, util_crypto_1.cryptoWaitReady)();
    const _suri = seed +
        `${hardPath ? `//${hardPath}` : ""}` +
        `${softPath ? `/${softPath}` : ""}` +
        `${passwordPath ? `///${passwordPath}` : ""}`;
    const keyring = new keyring_1.Keyring();
    return keyring.createFromUri(_suri, {}, "sr25519");
});
exports.getKeyringFromSeed = getKeyringFromSeed;
