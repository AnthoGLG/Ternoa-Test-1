"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.claimTeeRewards = exports.claimTeeRewardsTx = exports.submitMetricsServerReport = exports.submitMetricsServerReportTx = void 0;
const blockchain_1 = require("../blockchain");
const constants_1 = require("../constants");
const events_1 = require("../events");
/**
 * @name submitMetricsServerReportTx
 * @summary                         Creates an unsigned unsubmitted Submit Metrics Server Report Transaction Hash for an Era.
 * @param operatorAddress           The operator address to which submitted scores belongs.
 * @param metricsServerReport       The report containing the 5 scores computed for the mentioned era and the submitter's registered address.
 * @returns                         Unsigned unsubmitted Submit Metrics Server Report Transaction Hash. The Hash is only valid for 5 minutes.
 */
const submitMetricsServerReportTx = (operatorAddress, metricsServerReport) => __awaiter(void 0, void 0, void 0, function* () {
    return yield (0, blockchain_1.createTxHex)(constants_1.txPallets.tee, constants_1.txActions.submitMetricsServerReport, [operatorAddress, metricsServerReport]);
});
exports.submitMetricsServerReportTx = submitMetricsServerReportTx;
/**
 * @name submitMetricsServerReport
 * @summary                         Submit the metrics server report for a specific era.
 * @param operatorAddress           The operator address to which submitted scores belongs.
 * @param metricsServerReport       The report containing the 5 scores computed for the mentioned era and the submitter's registered address.
 * @param keyring                   Account that will sign the transaction.
 * @param waitUntil                 Execution trigger that can be set either to BlockInclusion or BlockFinalization.
 * @returns                         MetricsServerReportSubmittedEvent Blockchain event.
 */
const submitMetricsServerReport = (operatorAddress, metricsServerReport, keyring, waitUntil) => __awaiter(void 0, void 0, void 0, function* () {
    const tx = yield (0, exports.submitMetricsServerReportTx)(operatorAddress, metricsServerReport);
    const { events } = yield (0, blockchain_1.submitTxBlocking)(tx, waitUntil, keyring);
    return events.findEventOrThrow(events_1.MetricsServerReportSubmittedEvent);
});
exports.submitMetricsServerReport = submitMetricsServerReport;
/**
 * @name claimTeeRewardsTx
 * @summary                         Creates an unsigned unsubmitted Claim Tee Rewards Transaction Hash for an Era.
 * @param era                       The era to claim the rewards.
 * @returns                         Unsigned unsubmitted Claim Tee Rewards Transaction Hash. The Hash is only valid for 5 minutes.
 */
const claimTeeRewardsTx = (era) => __awaiter(void 0, void 0, void 0, function* () {
    return yield (0, blockchain_1.createTxHex)(constants_1.txPallets.tee, constants_1.txActions.claimRewards, [era]);
});
exports.claimTeeRewardsTx = claimTeeRewardsTx;
/**
 * @name claimTeeRewards
 * @summary                         Claim the operator reward for a specific era.
 * @param era                       The era to claim the rewards.
 * @param keyring                   Account that will sign the transaction.
 * @param waitUntil                 Execution trigger that can be set either to BlockInclusion or BlockFinalization.
 * @returns                         RewardsClaimedEvent Blockchain event.
 */
const claimTeeRewards = (era, keyring, waitUntil) => __awaiter(void 0, void 0, void 0, function* () {
    const tx = yield (0, exports.claimTeeRewardsTx)(era);
    const { events } = yield (0, blockchain_1.submitTxBlocking)(tx, waitUntil, keyring);
    return events.findEventOrThrow(events_1.RewardsClaimedEvent);
});
exports.claimTeeRewards = claimTeeRewards;
