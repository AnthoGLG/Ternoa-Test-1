"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getMarketplaceAccountSizeLimit = exports.getMarketplaceOffchainDataLimit = void 0;
const blockchain_1 = require("../blockchain");
const constants_1 = require("../constants");
/**
 * @name getMarketplaceOffchainDataLimit
 * @summary Provides the maximum offchain data length.
 * @returns Number.
 */
const getMarketplaceOffchainDataLimit = () => __awaiter(void 0, void 0, void 0, function* () {
    const limit = (0, blockchain_1.consts)(constants_1.txPallets.marketplace, constants_1.chainConstants.offchainDataLimit);
    return limit.toNumber();
});
exports.getMarketplaceOffchainDataLimit = getMarketplaceOffchainDataLimit;
/**
 * @name getMarketplaceAccountSizeLimit
 * @summary The maximum number of accounts that can be stored inside the account list.
 * @returns Number.
 */
const getMarketplaceAccountSizeLimit = () => __awaiter(void 0, void 0, void 0, function* () {
    const limit = (0, blockchain_1.consts)(constants_1.txPallets.marketplace, constants_1.chainConstants.accountSizeLimit);
    return limit.toNumber();
});
exports.getMarketplaceAccountSizeLimit = getMarketplaceAccountSizeLimit;
