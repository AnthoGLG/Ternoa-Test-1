import BN from "bn.js";
import { IKeyringPair } from "@polkadot/types/types";
import { TransactionHashType } from "../blockchain";
import { WaitUntil } from "../constants";
import { MarketplaceCreatedEvent, MarketplaceConfigSetEvent, MarketplaceKindSetEvent, MarketplaceMintFeeSetEvent, MarketplaceOwnerSetEvent, NFTListedEvent, NFTSoldEvent, NFTUnlistedEvent } from "../events";
import { MarketplaceKind } from "./enum";
import { AccountListType, CollectionListType, CommissionFeeType, ListingFeeType, OffchainDataType } from "./types";
/**
 * @name createMarketplaceTx
 * @summary               Creates an unsigned unsubmitted Create-Marketplace Transaction Hash.
 * @param kind            Kind of marketplace : It must be public or private.
 * @returns               Unsigned unsubmitted Create-Marketplace Transaction Hash. The Hash is only valid for 5 minutes.
 */
export declare const createMarketplaceTx: (kind: MarketplaceKind) => Promise<TransactionHashType>;
/**
 * @name createMarketplace
 * @summary               Creates a Marketplace on the chain.
 * @param kind            Kind of marketplace : It must be public or private.
 * @param keyring         Account that will sign the transaction.
 * @param waitUntil       Execution trigger that can be set either to BlockInclusion or BlockFinalization.
 * @returns               MarketplaceCreatedEvent Blockchain event.
 */
export declare const createMarketplace: (kind: MarketplaceKind, keyring: IKeyringPair, waitUntil: WaitUntil) => Promise<MarketplaceCreatedEvent>;
/**
 * @name setMarketplaceConfigurationTx
 * @summary               Creates an unsigned unsubmitted Set-Marketplace-Configuration Transaction Hash.
 *
 *                        Each of the parameters of the marketplace, need one of the following type: Noop is set by default for each of the parameters.
 *                        - Noop: No Operation, nothing change.
 *                        - Remove: Current datas will be deleted.
 *                        - Set: An object that updates parameter value below.
 *                            - Commission Fee and Listing Fee require a data type (flat or percentage) under format : { [MarketplaceConfigAction.Set]: { setFeeType: number || BN}}
 *                            - AccountList require an array of string: { [MarketplaceConfigAction.Set]: string[]}
 *                            - OffChainData require a string: { [MarketplaceConfigAction.Set]: string}
 *                            - CollectionList require an arry of number: { [MarketplaceConfigAction.Set]: number[]}
 *
 *                        IMPORTANT: In order to avoid any error, we strongly recommand you to construct those fields using the helpers we provide.
 *                        - formatMarketplaceFee() for both commission and listing fee.
 *                        - formatMarketplaceAccountList() for the account list.
 *                        - formatMarketplaceOffchainData() for the offchain data.
 *                        - formatMarketplaceCollectionList() for the collection list.
 *                        - Check {@link https://docs.ternoa.network/for-developers/guides/marketplace/ Ternoa Doc}.
 *
 * @param id              Marketplace Id of the marketplace to update.
 * @param commissionFee   Commission when an NFT is sold on the marketplace : it can be set as flat (in Big Number format) or as percentage (in permill format). Without using formatters, you can use the convertMarketplaceFee() function.
 * @param listingFee      Fee when an NFT is added for sale to marketplace : it can be set as flat (in Big Number format) or as percentage (in permill format). Without using formatters, you can use the convertMarketplaceFee() function.
 * @param accountList     A list of accounts : if the marketplace kind is private, it allows these accounts to sell NFT. If the marketplace kind is public, it bans these accounts from selling NFT.
 * @param offchainData    Off-chain related marketplace metadata. Can be an IPFS Hash, an URL or plain text.
 * @param collectionList  A list of Collection Id: same as accountList, if the marketplace kind is private, the list is a whitelist and if the marketplace is public, the list bans the collection to be listed.
 * @returns               MarketplaceConfigSetEvent Blockchain event.
 */
export declare const setMarketplaceConfigurationTx: (id: number, commissionFee?: CommissionFeeType, listingFee?: ListingFeeType, accountList?: AccountListType, offchainData?: OffchainDataType, collectionList?: CollectionListType) => Promise<TransactionHashType>;
/**
 * @name setMarketplaceConfiguration
 * @summary               Set or Remove (Noop for No Operation) the marketplace parameters configuration : Commission fee, listing fee, the account list or any offchain datas.
 *
 *                        Each of the parameters of the marketplace, need one of the following type: Noop is set by default for each of the parameters.
 *                        - Noop: No Operation, nothing change.
 *                        - Remove: Current datas will be deleted.
 *                        - Set: An object that updates parameter value below.
 *                            - Commission Fee and Listing Fee require a data type (flat or percentage) under format : { [MarketplaceConfigAction.Set]: { setFeeType: number || BN}}
 *                            - AccountList require an array of string: { [MarketplaceConfigAction.Set]: string[]}
 *                            - OffChainData require a string: { [MarketplaceConfigAction.Set]: string}
 *                            - CollectionList require an arry of number: { [MarketplaceConfigAction.Set]: number[]}
 *
 *                        IMPORTANT: In order to avoid any error, we strongly recommand you to construct those fields using the helpers we provide.
 *                        - formatMarketplaceFee() for both commission and listing fee.
 *                        - formatMarketplaceAccountList() for the account list.
 *                        - formatMarketplaceOffchainData() for the offchain data.
 *                        - formatMarketplaceCollectionList() for the collection list.
 *                        - Check {@link https://docs.ternoa.network/for-developers/guides/marketplace/ Ternoa Doc}.
 *
 * @param id              Marketplace Id of the marketplace to update.
 * @param commissionFee   Commission when an NFT is sold on the marketplace : it can be set as flat (in Big Number format) or as percentage (in permill format). Without using formatters, you can use the convertMarketplaceFee() function.
 * @param listingFee      Fee when an NFT is added for sale to marketplace : it can be set as flat (in Big Number format) or as percentage (in permill format). Without using formatters, you can use the convertMarketplaceFee() function.
 * @param accountList     A list of accounts : if the marketplace kind is private, it allows these accounts to sell NFT. If the marketplace kind is public, it bans these accounts from selling NFT.
 * @param offchainData    Off-chain related marketplace metadata. Can be an IPFS Hash, an URL or plain text.
 * @param collectionList  A list of Collection Id: same as accountList, if the marketplace kind is private, the list is a whitelist and if the marketplace is public, the list bans the collection to be listed.
 * @param keyring         Account that will sign the transaction.
 * @param waitUntil       Execution trigger that can be set either to BlockInclusion or BlockFinalization.
 * @returns               MarketplaceConfigSetEvent Blockchain event.
 */
export declare const setMarketplaceConfiguration: (id: number, commissionFee: CommissionFeeType | undefined, listingFee: ListingFeeType | undefined, accountList: AccountListType | undefined, offchainData: OffchainDataType | undefined, collectionList: CollectionListType | undefined, keyring: IKeyringPair, waitUntil: WaitUntil) => Promise<MarketplaceConfigSetEvent>;
/**
 * @name setMarketplaceOwnerTx
 * @summary               Creates an unsigned unsubmitted Set-Marketplace-Owner Transaction Hash.
 * @param id              Marketplace Id of the marketplace to be transferred.
 * @param recipient       Adress of the new marketplace owner.
 * @returns               Unsigned unsubmitted Set-Marketplace-Owner Transaction Hash. The Hash is only valid for 5 minutes.
 */
export declare const setMarketplaceOwnerTx: (id: number, recipient: string) => Promise<TransactionHashType>;
/**
 * @name setMarketplaceOwner
 * @summary               Set the new marketplace owner on the chain.
 * @param id              Marketplace Id of the marketplace to be transferred.
 * @param recipient       Address of the new marketplace owner.
 * @param keyring         Account that will sign the transaction.
 * @param waitUntil       Execution trigger that can be set either to BlockInclusion or BlockFinalization.
 * @returns               MarketplaceOwnerSetEvent Blockchain event.
 */
export declare const setMarketplaceOwner: (id: number, recipient: string, keyring: IKeyringPair, waitUntil: WaitUntil) => Promise<MarketplaceOwnerSetEvent>;
/**
 * @name setMarketplaceKindTx
 * @summary               Creates an unsigned unsubmitted Set-Marketplace-Kind Transaction Hash.
 * @param kind            Kind of marketplace : It must be public or private.
 * @returns               Unsigned unsubmitted Set-Marketplace-Kind Transaction Hash. The Hash is only valid for 5 minutes.
 */
export declare const setMarketplaceKindTx: (id: number, kind: MarketplaceKind) => Promise<TransactionHashType>;
/**
 * @name setMarketplaceKind
 * @summary               Set the new marketplace kind on the chain.
 * @param kind            Kind of marketplace : It must be public or private.
 * @param keyring         Account that will sign the transaction.
 * @param waitUntil       Execution trigger that can be set either to BlockInclusion or BlockFinalization.
 * @returns               MarketplaceKindSetEvent Blockchain event.
 */
export declare const setMarketplaceKind: (id: number, kind: MarketplaceKind, keyring: IKeyringPair, waitUntil: WaitUntil) => Promise<MarketplaceKindSetEvent>;
/**
 * @name listNftTx
 * @summary               Creates an unsigned unsubmitted List-NFT Transaction Hash.
 * @param nftId           NFT Id of the NFT to be listed for sale.
 * @param marketplaceId   Marketplace Id of the marketplace to list the NFT on.
 * @param price           Price of the NFT.
 * @returns               Unsigned unsubmitted List-NFT Transaction Hash. The Hash is only valid for 5 minutes.
 */
export declare const listNftTx: (nftId: number, marketplaceId: number, price: number | BN) => Promise<TransactionHashType>;
/**
 * @name listNft
 * @summary               Lists an NFT on a marketplace.
 * @param nftId           NFT Id of the NFT to be listed for sale.
 * @param marketplaceId   Marketplace Id of the marketplace to list the NFT on.
 * @param price           Price of the NFT.
 * @param keyring         Account that will sign the transaction.
 * @param waitUntil       Execution trigger that can be set either to BlockInclusion or BlockFinalization.
 * @returns               NFTListedEvent Blockchain event.
 */
export declare const listNft: (nftId: number, marketplaceId: number, price: number | BN, keyring: IKeyringPair, waitUntil: WaitUntil) => Promise<NFTListedEvent>;
/**
 * @name unlistNftTx
 * @summary               Creates an unsigned unsubmitted Unlist-NFT Transaction Hash.
 * @param nftId           NFT Id of the NFT to be unlisted from sale.
 * @returns               Unsigned unsubmitted Unlist-NFT Transaction Hash. The Hash is only valid for 5 minutes.
 */
export declare const unlistNftTx: (nftId: number) => Promise<TransactionHashType>;
/**
 * @name unlistNft
 * @summary               Unlists an NFT from a marketplace.
 * @param nftId           NFT Id of the NFT to be unlisted from sale.
 * @param keyring         Account that will sign the transaction.
 * @param waitUntil       Execution trigger that can be set either to BlockInclusion or BlockFinalization.
 * @returns               NFTUnlistedEvent Blockchain event.
 */
export declare const unlistNft: (nftId: number, keyring: IKeyringPair, waitUntil: WaitUntil) => Promise<NFTUnlistedEvent>;
/**
 * @name buyNftTx
 * @summary               Creates an unsigned unsubmitted Buy-NFT Transaction Hash.
 * @param nftId           NFT Id of the NFT for sale.
 * @param nftBuyingPrice  The NFT buying price signed.
 * @returns               Unsigned unsubmitted Buy-NFT Transaction Hash. The Hash is only valid for 5 minutes.
 */
export declare const buyNftTx: (nftId: number, nftBuyingPrice: number | BN) => Promise<TransactionHashType>;
/**
 * @name buyNft
 * @summary               Buys an NFT on a marketplace.
 * @param nftId           NFT Id of the NFT for sale.
 * @param nftBuyingPrice  The NFT buying price signed.
 * @param keyring         Account that will sign the transaction.
 * @param waitUntil       Execution trigger that can be set either to BlockInclusion or BlockFinalization.
 * @returns               NFTSoldEvent Blockchain event.
 */
export declare const buyNft: (nftId: number, nftBuyingPrice: number | BN, keyring: IKeyringPair, waitUntil: WaitUntil) => Promise<NFTSoldEvent>;
/**
 * @name setMarketplaceMintFeeTx
 * @summary               Creates an unsigned unsubmitted Set-Marketplace-Mint-Fee Transaction Hash.
 * @param fee             Fee to mint a marketplace.
 * @returns               Unsigned unsubmitted Set-Marketplace-Mint-Fee Transaction Hash. The Hash is only valid for 5 minutes.
 */
export declare const setMarketplaceMintFeeTx: (fee: number | BN) => Promise<TransactionHashType>;
/**
 * @name setMarketplaceMintFee
 * @summary               Set the new marketplace minting fee on the chain.
 * @param fee             Fee to mint a marketplace.
 * @param keyring         Account that will sign the transaction.
 * @param waitUntil       Execution trigger that can be set either to BlockInclusion or BlockFinalization.
 * @returns               NFTSoldEvent Blockchain event.
 */
export declare const setMarketplaceMintFee: (fee: number | BN, keyring: IKeyringPair, waitUntil: WaitUntil) => Promise<MarketplaceMintFeeSetEvent>;
