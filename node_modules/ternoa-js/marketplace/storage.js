"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getNftForSale = exports.getMarketplaceData = exports.getNextMarketplaceId = exports.getMarketplaceMintFee = void 0;
const util_1 = require("@polkadot/util");
const blockchain_1 = require("../blockchain");
const constants_1 = require("../constants");
/**
 * @name getMarketplaceMintFee
 * @summary               Fee to mint a Marketplace. (extra fee on top of the tx fees).
 * @returns               Marketplace mint fee.
 */
const getMarketplaceMintFee = () => __awaiter(void 0, void 0, void 0, function* () {
    const fee = yield (0, blockchain_1.query)(constants_1.txPallets.marketplace, constants_1.chainQuery.marketplaceMintFee);
    return fee;
});
exports.getMarketplaceMintFee = getMarketplaceMintFee;
/**
 * @name getNextMarketplaceId
 * @summary               Get the next Marketplace Id available.
 * @returns               Number.
 */
const getNextMarketplaceId = () => __awaiter(void 0, void 0, void 0, function* () {
    const id = yield (0, blockchain_1.query)(constants_1.txPallets.marketplace, constants_1.chainQuery.nextMarketplaceId);
    return id.toNumber();
});
exports.getNextMarketplaceId = getNextMarketplaceId;
/**
 * @name getMarketplaceData
 * @summary               Provides the data related to a marketplace.
 * @param marketplaceId   The Markeplace id.
 * @returns               A JSON object with the marketplace data. ex:{owner, kind, accountList, (...)}
 */
const getMarketplaceData = (marketplaceId) => __awaiter(void 0, void 0, void 0, function* () {
    const data = yield (0, blockchain_1.query)(constants_1.txPallets.marketplace, constants_1.chainQuery.marketplaces, [marketplaceId]);
    if (data.isEmpty == true) {
        return null;
    }
    try {
        const result = data.toJSON();
        if (result.commissionFee) {
            result.commissionFee.flat
                ? (result.commissionFee.flat = (0, blockchain_1.balanceToNumber)((0, util_1.bnToBn)(result.commissionFee.flat)))
                : (result.commissionFee.percentage = result.commissionFee.percentage / 10000);
        }
        if (result.listingFee) {
            result.listingFee.flat
                ? (result.listingFee.flat = (0, blockchain_1.balanceToNumber)((0, util_1.bnToBn)(result.listingFee.flat)))
                : (result.listingFee.percentage = result.listingFee.percentage / 10000);
        }
        // The offchainData is an hexadecimal string, we convert it to a human readable string.
        if (result.offchainData)
            result.offchainData = (0, util_1.hexToString)(result.offchainData);
        return result;
    }
    catch (error) {
        throw new Error(`${constants_1.Errors.MARKETPLACE_CONVERSION_ERROR}`);
    }
});
exports.getMarketplaceData = getMarketplaceData;
/**
 * @name getNftForSale
 * @summary               Provides the data related to an NFT listed for sale.
 * @param nftId           The NFT id.
 * @returns               A JSON object with the NFT listing data.
 */
const getNftForSale = (nftId) => __awaiter(void 0, void 0, void 0, function* () {
    const data = yield (0, blockchain_1.query)(constants_1.txPallets.marketplace, constants_1.chainQuery.listedNfts, [nftId]);
    if (data.isEmpty == true) {
        return null;
    }
    try {
        const result = data.toJSON();
        return result;
    }
    catch (error) {
        throw new Error(`${constants_1.Errors.LISTED_NFT_CONVERSION_ERROR}`);
    }
});
exports.getNftForSale = getNftForSale;
