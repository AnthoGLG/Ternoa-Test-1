import BN from "bn.js";
import type { IKeyringPair } from "@polkadot/types/types";
import { TransactionHashType } from "../blockchain";
import { WaitUntil } from "../constants";
import { BalancesTransferEvent } from "../events";
/**
 * @name balancesTransferTx
 * @summary             Creates an unsigned unsubmitted Balance-Transfert Transaction Hash.
 * @param to            Public address of the account to transfer the amount to.
 * @param amount        Token amount to transfer.
 * @returns             Unsigned unsubmitted Balance-Transfert Transaction Hash. The Hash is only valid for 5 minutes.
 */
export declare const balancesTransferTx: (to: string, amount: number | BN) => Promise<TransactionHashType>;
/**
 * @name balancesTransfer
 * @summary             Transfers some liquid free balance to another account.
 * @param to            Public address of the account to transfer the amount to.
 * @param amount        Token amount to transfer.
 * @param keyring       Account that will sign the transaction.
 * @param waitUntil     Execution trigger that can be set either to BlockInclusion or BlockFinalization.
 * @returns             BalancesTransferEvent Blockchain event.
 */
export declare const balancesTransfer: (to: string, amount: number | BN, keyring: IKeyringPair, waitUntil: WaitUntil) => Promise<BalancesTransferEvent>;
/**
 * @name balancesTransferAllTx
 * @summary             Creates an unsigned unsubmitted Balance-TransfertAll Transaction Hash.
 * @param to            Public address of the account to transfer the amount to.
 * @param keepAlive     Ensure that the transfer does not kill the account, it retains the Existential Deposit.
 * @returns             Unsigned unsubmitted Balance-TransfertAll Transaction Hash. The Hash is only valid for 5 minutes.
 */
export declare const balancesTransferAllTx: (to: string, keepAlive?: boolean) => Promise<TransactionHashType>;
/**
 * @name balancesTransferAll
 * @summary             Transfers the entire transferable balance from the caller account.
 * @param to            Public address of the account to transfer the amount to.
 * @param keepAlive     Ensure that the transfer does not kill the account, it retains the Existential Deposit.
 * @param keyring       Account that will sign the transaction.
 * @param waitUntil     Execution trigger that can be set either to BlockInclusion or BlockFinalization.
 * @returns             BalancesTransferEvent Blockchain event.
 */
export declare const balancesTransferAll: (to: string, keepAlive: boolean | undefined, keyring: IKeyringPair, waitUntil: WaitUntil) => Promise<BalancesTransferEvent>;
/**
 * @name balancesTransferKeepAliveTx
 * @summary             Creates an unsigned unsubmitted Balance-TransfertKeepAlive Transaction Hash.
 * @param to            Public address of the account to transfer the amount to.
 * @param amount        Token amount to transfer.
 * @returns             Unsigned unsubmitted Balance-TransfertKeepAlive Transaction Hash. The Hash is only valid for 5 minutes.
 */
export declare const balancesTransferKeepAliveTx: (to: string, amount: number | BN) => Promise<TransactionHashType>;
/**
 * @name balancesTransferKeepAlive
 * @summary             Transfers some liquid free balance to another account with a check that the transfer will not kill the origin account.
 * @param to            Public address of the account to transfer the amount to.
 * @param amount        Token amount to transfer.
 * @param keyring       Account that will sign the transaction.
 * @param waitUntil     Execution trigger that can be set either to BlockInclusion or BlockFinalization.
 * @returns             BalancesTransferEvent Blockchain event.
 */
export declare const balancesTransferKeepAlive: (to: string, amount: number | BN, keyring: IKeyringPair, waitUntil: WaitUntil) => Promise<BalancesTransferEvent>;
