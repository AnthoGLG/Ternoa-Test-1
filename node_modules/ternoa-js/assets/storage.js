"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getAccountAssetBalance = exports.getAccountAssetData = void 0;
const util_1 = require("@polkadot/util");
const constants_1 = require("../constants");
const blockchain_1 = require("../blockchain");
/**
 * @name getTotalAssetBalance
 * @summary           The holdings of a specific account for a specific asset.
 * @param assetId     The ID of the asset.
 * @param address   Public address of the account to get balances.
 * @returns           The holdings/balance information of the account : balance, isFrozen: boolean, reason, extra
 */
const getAccountAssetData = (assetId, address) => __awaiter(void 0, void 0, void 0, function* () {
    const accountData = (yield (0, blockchain_1.query)(constants_1.txPallets.assets, constants_1.chainQuery.account, [assetId, address])).toJSON();
    return accountData;
});
exports.getAccountAssetData = getAccountAssetData;
/**
 * @name getAssetBalance
 * @summary           Get the balance of an account for a specific asset.
 * @param assetId     The ID of the asset.
 * @param address   Public address of the account to get balance.
 * @returns           The balance of the account.
 */
const getAccountAssetBalance = (assetId, address) => __awaiter(void 0, void 0, void 0, function* () {
    const data = yield (0, exports.getAccountAssetData)(assetId, address);
    const balance = data ? (0, util_1.bnToBn)(data.balance) : null;
    return balance;
});
exports.getAccountAssetBalance = getAccountAssetBalance;
