"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const bn_js_1 = __importDefault(require("bn.js"));
const dotenv_1 = __importDefault(require("dotenv"));
const account_1 = require("../../account");
const balance_1 = require("../../balance");
const blockchain_1 = require("../../blockchain");
const constants_1 = require("../../constants");
const testingPairs_1 = require("../testingPairs");
dotenv_1.default.config();
module.exports = () => __awaiter(void 0, void 0, void 0, function* () {
    if (!process.env.SEED_TEST_FUNDS)
        throw new Error(constants_1.Errors.SEED_NOT_FOUND);
    const dstKeyring = yield (0, account_1.getKeyringFromSeed)(process.env.SEED_TEST_FUNDS);
    const pairs = testingPairs_1.PAIRSSR25519;
    const zero = new bn_js_1.default("0");
    const keyrings = yield Promise.all(pairs.map((pair) => (0, account_1.getKeyringFromSeed)(pair.seed)));
    const balances = yield Promise.all(pairs.map((pair) => (0, balance_1.getTransferrableBalance)(pair.publicKey)));
    const filteredKeyrings = keyrings.filter((_, i) => balances[i].gt(zero));
    yield Promise.all(filteredKeyrings.map((keyring) => (0, balance_1.balancesTransferAll)(dstKeyring.address, false, keyring, constants_1.WaitUntil.BlockInclusion)));
    yield (0, blockchain_1.safeDisconnect)();
});
