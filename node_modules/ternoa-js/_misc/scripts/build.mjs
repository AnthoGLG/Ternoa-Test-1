"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = require("fs");
const path_1 = require("path");
const packagePath = process.cwd();
const buildPath = (0, path_1.join)(packagePath, "./build");
const writeJson = (targetPath, obj) => (0, fs_1.writeFileSync)(targetPath, JSON.stringify(obj, null, 2), "utf8");
function createPackageFile() {
    return __awaiter(this, void 0, void 0, function* () {
        const packageData = JSON.parse((0, fs_1.readFileSync)((0, path_1.resolve)(packagePath, "./package.json"), "utf8"));
        const newPackageData = Object.assign(Object.assign({}, packageData), { main: "./index.js", types: "./index.d.ts", typesVersions: {
                "*": {
                    account: ["./account/index.d.ts"],
                    assets: ["./assets/index.d.ts"],
                    auction: ["./auction/index.d.ts"],
                    balance: ["./balance/index.d.ts"],
                    blockchain: ["./blockchain/index.d.ts"],
                    helpers: ["./helpers/index.d.ts"],
                    nft: ["./nft/index.d.ts"],
                    rent: ["./rent/index.d.ts"],
                    tee: ["./tee/index.d.ts"],
                    marketplace: ["./marketplace/index.d.ts"],
                    protocols: ["./protocols/index.d.ts"],
                    events: ["./events.d.ts"],
                    constants: ["./constants.d.ts"],
                },
            } });
        delete newPackageData.scripts;
        delete newPackageData.devDependencies;
        const targetPath = (0, path_1.resolve)(buildPath, "./package.json");
        writeJson(targetPath, newPackageData);
        console.log(`Created package.json in ${targetPath}`);
    });
}
function includeFileInBuild(file) {
    return __awaiter(this, void 0, void 0, function* () {
        const sourcePath = (0, path_1.resolve)(packagePath, file);
        const targetPath = (0, path_1.resolve)(buildPath, (0, path_1.basename)(file));
        (0, fs_1.copyFileSync)(sourcePath, targetPath);
        console.log(`Copied ${sourcePath} to ${targetPath}`);
    });
}
function run() {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            yield createPackageFile();
            yield includeFileInBuild("./README.md");
            yield includeFileInBuild("./LICENSE");
        }
        catch (err) {
            console.error(err);
            process.exit(1);
        }
    });
}
run();
