"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createTestPairs = exports.PAIRSSR25519 = void 0;
const util_crypto_1 = require("@polkadot/util-crypto");
const keyring_1 = require("@polkadot/keyring");
exports.PAIRSSR25519 = [
    {
        name: "test",
        publicKey: "5GesFQSwhmuMKAHcDrfm21Z5xrq6kW93C1ch2Xosq1rXx2Eh",
        seed: "soccer traffic version fault humor tackle bid tape obvious wild fish coin",
        type: "sr25519",
    },
    {
        name: "dest",
        publicKey: "5C5U1zoKAytwirg2XD2cUDXrAShyQ4dyx5QkPf7ChWQAykLR",
        seed: "sponsor music pony breeze recall engage sport jelly certain unit spoil shift",
        type: "sr25519",
    },
];
/**
 * @name testKeyring
 * @summary Create keyring pairs with locked test accounts
 */
const createTestPairs = () => __awaiter(void 0, void 0, void 0, function* () {
    yield (0, util_crypto_1.cryptoWaitReady)();
    const keyring = new keyring_1.Keyring();
    for (const { name, seed, type } of exports.PAIRSSR25519) {
        keyring.addPair(keyring.createFromUri(seed, {
            isTesting: true,
            name,
        }, type));
    }
    const pairs = keyring.getPairs();
    const map = {};
    for (const p of pairs) {
        map[p.meta.name] = p;
    }
    return map;
});
exports.createTestPairs = createTestPairs;
