"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.HttpClient = void 0;
const axios_1 = __importDefault(require("axios"));
class HttpClient {
    constructor(baseURL, timeout) {
        this.get = (url, config = {}) => __awaiter(this, void 0, void 0, function* () {
            const response = yield this.client.get(url, config).catch((err) => {
                throw new Error(err);
            });
            return response.data;
        });
        this.getRaw = (url, config = {}) => __awaiter(this, void 0, void 0, function* () {
            const response = yield this.client.get(url, config).catch((err) => {
                throw new Error(err);
            });
            const { data, status } = response;
            return Object.assign(Object.assign({}, data), { status });
        });
        this.post = (url, data, config = {}) => __awaiter(this, void 0, void 0, function* () {
            const response = yield this.client.post(url, data, config).catch((err) => {
                throw new Error(err);
            });
            return response.data;
        });
        this.client = axios_1.default.create(Object.assign({ baseURL }, (timeout && { timeout })));
    }
}
exports.HttpClient = HttpClient;
