import { IKeyringPair } from "@polkadot/types/types";
import { Signer } from "@polkadot/api/types";
/**
 * @name getSignatureFromKeyring
 * @summary         Signs data using the keyring.
 * @param keyring   Account that will sign the data.
 * @param data      Data to be signed.
 * @returns         Hex value of the signed data.
 */
export declare const getSignatureFromKeyring: (keyring: IKeyringPair, data: string) => `0x${string}`;
/**
 * @name getSignatureFromExtension
 * @summary                 Signs data using an injector extension. We recommand Polkadot extention.
 * @param signerAddress     Account address that will sign the data.
 * @param injectorExtension The signer method retrived from your extension: object must have a signer key.
 * @param data              Data to be signed.
 * @returns                 Hex value of the signed data.
 */
export declare const getSignatureFromExtension: (signerAddress: string, injectorExtension: Record<string, Signer | any>, data: string) => Promise<string | undefined>;
/**
 * @name getLastBlock
 * @summary         Retrieve the last block number.
 * @returns         The last Block id (a number).
 */
export declare const getLastBlock: () => Promise<number>;
