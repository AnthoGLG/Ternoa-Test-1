"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.decryptFile = exports.encryptFile = exports.encryptContent = exports.generatePGPKeys = void 0;
const openpgp = __importStar(require("openpgp"));
const utils_1 = require("./utils");
/**
 * @name generatePGPKeys
 * @summary                 Generates a new PGP key pair.
 * @returns                 An object with both private and public PGP keys.
 */
const generatePGPKeys = () => __awaiter(void 0, void 0, void 0, function* () {
    const { privateKey, publicKey } = yield openpgp.generateKey({
        type: "ecc",
        curve: "curve25519",
        userIDs: [{ name: "Jon Smith", email: "jon@example.com" }],
    });
    return { privateKey, publicKey };
});
exports.generatePGPKeys = generatePGPKeys;
/**
 * @name encryptContent
 * @summary                 Encrypts a content (string).
 * @param content           Content to encrypt.
 * @param publicPGPKey      Public Key to encrypt the content.
 * @see                     Learn more about encryption {@link https://docs.openpgpjs.org/global.html#encrypt here}.
 * @returns                 A string containing the encrypted content.
 */
const encryptContent = (content, publicPGPKey) => __awaiter(void 0, void 0, void 0, function* () {
    const message = yield openpgp.createMessage({
        text: content,
    });
    const publicKey = yield openpgp.readKey({
        armoredKey: publicPGPKey,
    });
    const encryptedContent = yield openpgp.encrypt({
        message,
        encryptionKeys: [publicKey],
    });
    return encryptedContent;
});
exports.encryptContent = encryptContent;
/**
 * @name encryptFile
 * @summary                 Encrypts file with the public key.
 * @param file              File to encrypt.
 * @param publicPGPKey      Public Key to encrypt the file.
 * @see                     Learn more about encryption {@link https://docs.openpgpjs.org/global.html#encrypt here}.
 * @returns                 A string containing the encrypted file.
 */
const encryptFile = (file, publicPGPKey) => __awaiter(void 0, void 0, void 0, function* () {
    const buffer = yield (0, utils_1.convertFileToBuffer)(file);
    const content = buffer.toString("base64");
    const encryptedFile = yield (0, exports.encryptContent)(content, publicPGPKey);
    return encryptedFile;
});
exports.encryptFile = encryptFile;
/**
 * @name decryptFile
 * @summary                 Decrypts message with the private key.
 * @param encryptedMessage  Message to decrypt.
 * @param privatePGPKey     Private Key to decrypt the message.
 * @see                     Learn more about encryption {@link https://docs.openpgpjs.org/global.html#decrypt here}.
 * @returns                 A base64 string containing the decrypted message.
 */
const decryptFile = (encryptedMessage, privatePGPKey) => __awaiter(void 0, void 0, void 0, function* () {
    const privateKey = yield openpgp.readPrivateKey({ armoredKey: privatePGPKey });
    const message = yield openpgp.readMessage({
        armoredMessage: encryptedMessage,
    });
    const { data: decryptedMessage } = yield openpgp.decrypt({
        message,
        decryptionKeys: privateKey,
    });
    return decryptedMessage;
});
exports.decryptFile = decryptFile;
